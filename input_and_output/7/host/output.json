{"version":"2.0, build 20191126_034138","type":"hodor_studenttester","contentRoot":"/student","testRoot":"/tester","results":[{"code":101,"count":0,"errors":[],"identifier":"CHECKSTYLE","result":"SUCCESS"},{"code":103,"files":[{"path":"birdwatching.rst","contents":"EX11 Birdwatching\n=================\n\nMoodul: ``EX11Birdwatching``\n\nPakk: ``ee.taltech.iti0202.birdwatching``\n\nÜlesande eesmärgiks on saada lähemalt tuttavaks voogudega - ``stream``. Selleks tuleb realiseerida linnuvaatluste statistika analüüsimise rakendus. Ülesanne tuleb lahendada kasutades streame.\n\nVajalikud teadmised\n-------------------\n\nÜlesandes kasutatud mõisted: ``stream``\n\nStream: https://ained.ttu.ee/javadoc/stream.html?highlight=stream\n\nKlass ``Bird``\n--------------\n\nAsukoht: ``ee.taltech.iti0202.birdwatching.bird``\n\nIga linnu kohta on olemas järgenvad andmed - \n\n- liik - species (String)\n- kaal - weight (kg) (double)\n- tiibade siruulatus - wingspan (double)\n- vanus - age -> ADULT või YOUNGLING (enum ``Age`` ``Bird`` klassis)\n- sugu - sex -> MALE, FEMALE või UNKNOWN (enum ``Sex`` ``Bird`` klassis)\n\nTuleb realiseerida ka getter meetodid.\n\nKlass ``BirdBuilder``\n---------------------\n\nAsukoht: ``ee.taltech.iti0202.birdwatching.bird``\n\nBuilder klass linnu objekti loomiseks.\n\nVt: https://www.jetbrains.com/help/idea/replace-constructor-with-builder.html (*builder*'i loomine)\n\n\nKlass ``BirdDataController`` ning erind ``BirdDataException``\n-------------------------------------------------------------\n\nAsukoht: ``ee.taltech.iti0202.birdwatching.bird``\n\n- ``public void readBirdDataFromCsvFile(String filename) throws BirdDataException`` - meetod, mis saab sisendiks csv faili asukoha ning loeb failist lindude infot stream'i abil (vihje - ``Files.lines``), tekitades jooksvalt builderit kasutades lindude objektid, millest moodustatakse list. Lindude info tuleb salvestada listi, seda läheb statistika arvutamisel vaja. Vea korral tuleb visata BirdDataException sõnumiga \"Error handling bird data\", erindisse tuleks põhjusena (*cause*) kaasa anda algne erind (nt `IOException`).\n- ``public List<Bird> getBirds()`` - tagastab failist loetud linnud.\n\nSoo ning vanuse enumite loomiseks csv failist saadud sõne põhjal, oleks mõistlik luua vastavad meetodid.\n\nNäidissisend:\n\n.. code-block:: java\n\n    cormorant,1.6,72,unknown,youngling\n    seagull,1.52,140,male,adult\n    eurasian bullfinch,0.16,18,female,adult\n    seagull,1.45,134,female,adult\n\n(liik,kaal kg,tiivaulatus,sugu,vanus)\n\nLiides ``BirdFilter``\n---------------------\n\nAsukoht: ``ee.taltech.iti0202.birdwatching.filter``\n \nTuleb luua liides, milles on meetod:\n\n- ``List<Bird> getSuitableBirds(List<Bird> birds)``\n\nLiidest realiseerivad järgnevad klassid:\n\n- ``GenericFilter`` - tagastab kõik linnud\n- ``SpeciesFilter`` - saab konstruktorisse liigi ning tagastab kõik selle liigi linnud.\n- ``WeightFilter`` - saab konstruktorisse miinimum- ning maksimumkaalu (selles järjekorras) ning tagastab sellesse vahemikku jääva kaaluga linnud (otspunktid kaasarvatud).\n- ``WingspanFilter`` - saab konstruktorisse miinimum- ning maksimumsiruulatuse (selles järjekorras) ning tagastab sellesse vahemikku jääva tiibade siruulatusega linnud (otspunktid kaasarvatud).\n- ``SexFilter`` - saab konstruktorisse soo ning tagastab kõik sellest soost linnud.\n- ``AgeFilter`` - saab konstruktorisse vanusetüübi ning tagastab kõik sellesse vanustüüpi kuuluvad linnud\n\nKõik meetodi ``getSuitableBirds`` realisatsioonid peavad olema loodud kasutades vooge.\n\nKlass ``StatisticsCalculator``\n------------------------------\n\nAsukoht: ``ee.taltech.iti0202.birdwatching.statistics``\n\nKõik klassi meetodid tuleb realiseerida kasutades streame.\n\n- ``public StatisticsCalculator(BirdDataController controller, BirdFilter filter)`` - konstruktor, saab sisendiks controlleri ning filtri, mida kasutatakse kõikides meetodites.\n- ``public void prepareBirdData(String filename)`` - meetod, mis kutsub välja controlleris olevat lindude andmete failist lugemise meetodit.\n- ``public List<Bird> getBirds()`` - meetod, mis tagastab kõik filtri läbinud linnud. Kõik ülejäänud päringud kasutavad selle meetodi tulemust (ehk filtreeritud linde).\n- ``public long countBirds()`` - meetod tagastab lindude koguse.\n- ``public OptionalDouble findAverageWeight()`` - meetod, mis tagastab lindude keskmise kaalu, kui linde ei ole ning keskmist kaalu ei saa leida, tagastada tühi Optional.\n- ``public OptionalDouble findMinWeight()`` - meetod, mis tagastab lindude miinumukaalu, kui linde ei ole ning miinimumkaalu ei saa leida, tagastada tühi Optional.\n- ``public OptionalDouble findMaxWeight()`` - meetod, mis tagastab lindude maksimumkaalu, kui linde ei ole ning maksimumkaalu ei saa leida, tagastada tühi Optional.\n- ``public OptionalDouble findAverageWingspan()`` - meetod, mis tagastab lindude keskmise siruulatuse, kui linde ei ole ning keskmist siruulatust ei saa leida, tagastada tühi Optional.\n- ``public OptionalDouble findMinWingspan()`` - meetod, mis tagastab lindude miinimumsiruulatuse, kui lindude list on tühi ning miinimumsiruulatust ei ole võimalik leida, tagastada tühi Optional.\n- ``public OptionalDouble findMaxWingspan()`` - meetod, mis tagastab lindude maksimumsiruulatuse, kui lindude list on tühi ning maksimumsiruulatust ei ole võimalik leida, tagastada tühi Optional.\n- ``public List<Double> getWingspanData()`` - meetod, mis tagastab kõik siruulatused.\n- ``public List<Double> getWeightDataInGrams()`` - meetod, mis tagastab kõik kaalud grammides (algsed linnu kaalud on kilogrammides).\n- ``public List<Bird> getSample(int sampleSize)`` - meetod, mis tagastab valimi lindudest, valimi suuruseks on sampleSize, valimit hakatakse lugema lindude listi algusest.\n- ``public Optional<Bird> findSampleBird(String species, Sex sex, Age age)`` - meetod, mis tagastab esimese linnu, kes vastab etteantud kriteeriumitele, kui sobivat lindu ei leita tuleb tagastada tühi Optional.\n- ``public Set<String> getAllEncounteredSpecies()`` - meetod, mis tagastab kõik nähtud liigid.\n- ``public List<Bird> getLargeBirds(int skipCount)`` - meetod, mis sorteerib linnud väiksematest suuremateni kaalu alusel ning jätab vahele esimesed väiksemad linnud mahus skipCount.\n- ``public Map<String, List<Bird>> mapBirdsToSpecies()`` - meetod, mis tagastab mapi, kus igale andmestikus esinevale liigile vastab list kõikidest selle liigi lindudest.\n\nMall\n~~~~\n\n.. code-block:: java\n\n    package ee.taltech.iti0202.birdwatching.statistics;\n\n    import ee.taltech.iti0202.birdwatching.bird.Bird;\n    import ee.taltech.iti0202.birdwatching.bird.BirdDataController;\n    import ee.taltech.iti0202.birdwatching.filter.BirdFilter;\n\n    import java.util.*;\n\n    public class StatisticsCalculator {\n\n        public StatisticsCalculator(BirdDataController controller, BirdFilter filter) {\n        }\n\n        public void prepareBirdData(String filename) {\n        }\n\n        public List<Bird> getBirds() {\n        }\n\n        public long countBirds() {\n        }\n\n        public OptionalDouble findAverageWeight() {\n        }\n\n        public OptionalDouble findMinWeight() {\n        }\n\n        public OptionalDouble findMaxWeight()  {\n        }\n\n        public OptionalDouble findAverageWingspan() {\n        }\n\n        public OptionalDouble findMinWingspan() {\n        }\n\n        public OptionalDouble findMaxWingspan() {\n        }\n\n        public List<Double> getWingspanData() {\n        }\n\n        public List<Double> getWeightDataInGrams() {\n        }\n\n        public List<Bird> getSample(int sampleSize) {\n        }\n\n        public Optional<Bird> findSampleBird(String species, Bird.Sex sex, Bird.Age age) {\n        }\n\n        public Set<String> getAllEncounteredSpecies() {\n        }\n\n        public List<Bird> getLargeBirds(int skipCount) {\n        }\n\n        public Map<String, List<Bird>> mapBirdsToSpecies() {\n        }\n\n    }\n\n","isTest":true},{"path":"checkstyle.xml","contents":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n<!--\n\n  Checkstyle configuration that checks the sun coding conventions from:\n\n    - the Java Language Specification at\n      http://java.sun.com/docs/books/jls/second_edition/html/index.html\n\n    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/\n\n    - the Javadoc guidelines at\n      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html\n\n    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html\n\n    - some best practices\n\n  Checkstyle is very configurable. Be sure to read the documentation at\n  http://checkstyle.sf.net (or in your downloaded distribution).\n\n  Most Checks are configurable, be sure to consult the documentation.\n\n  To completely disable a check, just comment it out or delete it from the file.\n\n  Finally, it is worth reading the documentation.\n\n-->\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <!--\n        If you set the basedir property below, then all reported file\n        names will be relative to the specified directory. See\n        http://checkstyle.sourceforge.net/5.x/config.html#Checker\n\n        <property name=\"basedir\" value=\"${basedir}\"/>\n    -->\n\n    <!-- Checks that a package-info.java file exists for each package.     -->\n    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->\n    <!--\n    <module name=\"JavadocPackage\"/>\n    -->\n\n    <!-- Checks whether files end with a new line.                        -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->\n    <module name=\"NewlineAtEndOfFile\">\n        <property name=\"fileExtensions\" value=\"java, xml, py, css, fxml\"/>\n    </module>\n\n    <!-- Checks that property files contain the same keys.         -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->\n    <module name=\"Translation\"/>\n\n    <!-- Checks for Size Violations.                    -->\n    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n    <module name=\"FileLength\"/>\n\n    <!-- Checks for whitespace                               -->\n    <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n    <module name=\"FileTabCharacter\"/>\n\n    <!-- Miscellaneous other checks.                   -->\n    <!-- See http://checkstyle.sf.net/config_misc.html -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"\\s+$\"/>\n        <property name=\"minimum\" value=\"0\"/>\n        <property name=\"maximum\" value=\"0\"/>\n        <property name=\"message\" value=\"Line has trailing spaces.\"/>\n    </module>\n\n    <module name=\"TreeWalker\">\n\n        <!-- Checks for Javadoc comments.                     -->\n        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n\n\n        <!-- Checks for Naming Conventions.                  -->\n        <!-- See http://checkstyle.sf.net/config_naming.html -->\n        <module name=\"ConstantName\"/>\n        <!--\n            <module name=\"LocalFinalVariableName\"/>\n        -->\n        <module name=\"LocalVariableName\"/>\n        <module name=\"MemberName\"/>\n        <module name=\"MethodName\"/>\n        <module name=\"PackageName\"/>\n        <module name=\"ParameterName\"/>\n        <module name=\"StaticVariableName\"/>\n        <module name=\"TypeName\"/>\n\n\n        <!-- Checks for Headers                                -->\n        <!-- See http://checkstyle.sf.net/config_header.html   -->\n        <!-- <module name=\"Header\">                            -->\n        <!-- The follow property value demonstrates the ability     -->\n        <!-- to have access to ANT properties. In this case it uses -->\n        <!-- the ${basedir} property to allow Checkstyle to be run  -->\n        <!-- from any directory within a project. See property      -->\n        <!-- expansion,                                             -->\n        <!-- http://checkstyle.sf.net/config.html#properties        -->\n        <!-- <property                                              -->\n        <!--     name=\"headerFile\"                                  -->\n        <!--     value=\"${basedir}/java.header\"/>                   -->\n        <!-- </module> -->\n\n        <!-- Following interprets the header file as regular expressions. -->\n        <!-- <module name=\"RegexpHeader\"/>                                -->\n\n\n        <!-- Checks for imports                              -->\n        <!-- See http://checkstyle.sf.net/config_import.html -->\n        <module name=\"AvoidStarImport\"/>\n        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n        <module name=\"RedundantImport\"/>\n        <module name=\"UnusedImports\"/>\n\n\n        <!-- Checks for Size Violations.                    -->\n        <!-- See http://checkstyle.sf.net/config_sizes.html -->\n        <module name=\"LineLength\">\n            <property name=\"max\" value=\"120\"/>\n        </module>\n        <module name=\"MethodLength\"/>\n        <module name=\"ParameterNumber\"/>\n\n\n        <!-- Checks for whitespace                               -->\n        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n        <module name=\"EmptyForIteratorPad\"/>\n        <module name=\"GenericWhitespace\"/>\n        <module name=\"MethodParamPad\"/>\n        <module name=\"NoWhitespaceAfter\"/>\n        <module name=\"NoWhitespaceBefore\"/>\n        <module name=\"OperatorWrap\"/>\n        <module name=\"ParenPad\"/>\n        <module name=\"TypecastParenPad\"/>\n        <module name=\"WhitespaceAfter\"/>\n        <module name=\"WhitespaceAround\"/>\n\n\n        <!-- Modifier Checks                                    -->\n        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n        <module name=\"ModifierOrder\"/>\n        <module name=\"RedundantModifier\"/>\n\n\n        <!-- Checks for blocks. You know, those {}'s         -->\n        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n        <module name=\"AvoidNestedBlocks\"/>\n        <module name=\"EmptyBlock\"/>\n        <module name=\"LeftCurly\"/>\n        <module name=\"NeedBraces\">\n            <property name=\"allowSingleLineStatement\" value=\"true\"/>\n        </module>\n        <module name=\"RightCurly\"/>\n\n\n        <!-- Checks for common coding problems               -->\n        <!-- See http://checkstyle.sf.net/config_coding.html -->\n        <!-- module name=\"AvoidInlineConditionals\"/ -->\n        <module name=\"EmptyStatement\"/>\n        <module name=\"EqualsHashCode\"/>\n        <!--\n            <module name=\"HiddenField\">\n                <property name=\"ignoreSetter\" value=\"true\"/>\n        </module>\n        -->\n        <module name=\"IllegalInstantiation\"/>\n        <module name=\"InnerAssignment\"/>\n        <module name=\"MagicNumber\">\n            <property name=\"ignoreNumbers\" value=\"-5,-4,-3,-2,-1,0,1,2,3,4,5,10,100,1000\"/>\n        </module>\n        <module name=\"MissingSwitchDefault\"/>\n        <module name=\"SimplifyBooleanExpression\"/>\n        <module name=\"SimplifyBooleanReturn\"/>\n\n        <!-- Checks for class design                         -->\n        <!-- See http://checkstyle.sf.net/config_design.html -->\n        <!--\n            <module name=\"DesignForExtension\"/>\n        -->\n        <module name=\"FinalClass\"/>\n        <!--\n            <module name=\"HideUtilityClassConstructor\"/>\n        -->\n        <module name=\"InterfaceIsType\"/>\n        <!--\n            <module name=\"VisibilityModifier\"/>\n        -->\n\n\n        <!-- Miscellaneous other checks.                   -->\n        <!-- See http://checkstyle.sf.net/config_misc.html -->\n        <module name=\"ArrayTypeStyle\"/>\n        <!--\n            <module name=\"FinalParameters\"/>\n        -->\n        <module name=\"TodoComment\"/>\n        <module name=\"UpperEll\"/>\n\n    </module>\n\n\n</module>","isTest":true},{"path":"src/ee/taltech/iti0202/birdwatching/BirdwatchingTest.java","contents":"package ee.taltech.iti0202.birdwatching;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\nimport ee.taltech.iti0202.birdwatching.bird.BirdDataController;\nimport ee.taltech.iti0202.birdwatching.bird.BirdDataException;\nimport ee.taltech.iti0202.birdwatching.filter.*;\nimport ee.taltech.iti0202.birdwatching.statistics.StatisticsCalculator;\nimport ee.ttu.java.studenttester.annotations.TestContextConfiguration;\nimport ee.ttu.java.studenttester.enums.ReportMode;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport static ee.taltech.iti0202.birdwatching.bird.Bird.Age.ADULT;\nimport static ee.taltech.iti0202.birdwatching.bird.Bird.Age.YOUNGLING;\nimport static ee.taltech.iti0202.birdwatching.bird.Bird.Sex.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.closeTo;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.testng.Assert.*;\n\n@TestContextConfiguration(mode = ReportMode.VERBOSE)\npublic class BirdwatchingTest {\n\n    private static final String BIRD_DATA_CSV = \"files/bird-data.csv\";\n    private static final String EMPTY_CSV = \"files/empty.csv\";\n    private static final String FILE_CSV = \"file.csv\";\n\n    private static final String EURASIAN_BULLFINCH = \"eurasian bullfinch\";\n    private static final String CORMORANT = \"cormorant\";\n    private static final String SEAGULL = \"seagull\";\n    private static final String MAGPIE = \"magpie\";\n    private static final String BIRD = \"bird\";\n\n    private StatisticsCalculator calculator;\n    private BirdDataController controller;\n    private GenericFilter genericFilter;\n    private SpeciesFilter speciesFilter;\n    private WeightFilter weightFilter;\n    private WingspanFilter wingspanFilter;\n    private AgeFilter ageFilter;\n    private SexFilter sexFilter;\n\n    @BeforeMethod\n    public void setUp() {\n        genericFilter = new GenericFilter();\n        speciesFilter = new SpeciesFilter(MAGPIE);\n        weightFilter = new WeightFilter(0.5, 1.5);\n        wingspanFilter = new WingspanFilter(60, 80);\n        ageFilter = new AgeFilter(YOUNGLING);\n        sexFilter = new SexFilter(UNKNOWN);\n        controller = new BirdDataController();\n    }\n\n    @Test\n    public void readBirdDataFromCsvFileFileIsEmptyTest() throws BirdDataException {\n        controller.readBirdDataFromCsvFile(EMPTY_CSV);\n        assertTrue(controller.getBirds().isEmpty());\n    }\n\n    @Test\n    public void readBirdDataFromCsvFileFileNotFoundTest() {\n        try {\n            controller.readBirdDataFromCsvFile(FILE_CSV);\n            fail(\"Exception not thrown when the file is not found.\");\n        } catch (BirdDataException e) {\n            assertThat(e.getMessage(), is(\"Error handling bird data\"));\n            assertThat(e.getCause(), instanceOf(IOException.class));\n        }\n    }\n\n    @Test\n    public void readBirdDataFromCsvFileTest() throws BirdDataException {\n        controller.readBirdDataFromCsvFile(BIRD_DATA_CSV);\n        List<Bird> birds = controller.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(31));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(0.35, 0.01));\n        assertThat(bird.getWingspan(), closeTo(45.00, 0.01));\n        assertThat(bird.getSex(), is(MALE));\n        assertThat(bird.getAge(), is(YOUNGLING));\n    }\n\n    @Test\n    public void getBirdsEmptyFileTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n        assertTrue(calculator.getBirds().isEmpty());\n    }\n\n    @Test\n    public void genericFilterTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(31));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(0.35, 0.01));\n        assertThat(bird.getWingspan(), closeTo(45.00, 0.01));\n        assertThat(bird.getSex(), is(MALE));\n        assertThat(bird.getAge(), is(YOUNGLING));\n    }\n\n    @Test\n    public void weightFilterTest() {\n        calculator = new StatisticsCalculator(controller, weightFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(4));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(SEAGULL));\n        assertThat(bird.getWeight(), closeTo(1.5, 0.01));\n        assertThat(bird.getWingspan(), closeTo(120.0, 0.01));\n        assertThat(bird.getSex(), is(MALE));\n        assertThat(bird.getAge(), is(ADULT));\n    }\n\n    @Test\n    public void wingspanFilterTest() {\n        calculator = new StatisticsCalculator(controller, wingspanFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(4));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(5.0, 0.01));\n        assertThat(bird.getWingspan(), closeTo(60.0, 0.01));\n        assertThat(bird.getSex(), is(FEMALE));\n        assertThat(bird.getAge(), is(ADULT));\n    }\n\n    @Test\n    public void speciesFilterTest() {\n        calculator = new StatisticsCalculator(controller, speciesFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(9));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(MAGPIE));\n        assertThat(bird.getWeight(), closeTo(0.22, 0.01));\n        assertThat(bird.getWingspan(), closeTo(52.0, 0.01));\n        assertThat(bird.getSex(), is(FEMALE));\n        assertThat(bird.getAge(), is(ADULT));\n    }\n\n    @Test\n    public void sexFilterTest() {\n        calculator = new StatisticsCalculator(controller, sexFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(4));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(1.6, 0.01));\n        assertThat(bird.getWingspan(), closeTo(72.0, 0.01));\n        assertThat(bird.getSex(), is(UNKNOWN));\n        assertThat(bird.getAge(), is(YOUNGLING));\n    }\n\n    @Test\n    public void ageFilterTest() {\n        calculator = new StatisticsCalculator(controller, ageFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getBirds();\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(7));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(0.35, 0.01));\n        assertThat(bird.getWingspan(), closeTo(45.0, 0.01));\n        assertThat(bird.getSex(), is(MALE));\n        assertThat(bird.getAge(), is(YOUNGLING));\n    }\n\n    @Test\n    public void countBirdsEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n        assertThat(calculator.countBirds(), is(0L));\n    }\n\n    @Test\n    public void countBirdsTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        assertThat(calculator.countBirds(), is(31L));\n    }\n\n    @Test\n    public void findAverageWeightTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble averageWeight1 = calculator.findAverageWeight();\n\n        assertTrue(averageWeight1.isPresent());\n        assertThat(averageWeight1.getAsDouble(), closeTo(0.968, 0.001));\n\n        calculator = new StatisticsCalculator(controller, weightFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble averageWeight2 = calculator.findAverageWeight();\n\n        assertTrue(averageWeight2.isPresent());\n        assertThat(averageWeight2.getAsDouble(), closeTo(1.450, 0.001));\n    }\n\n    @Test\n    public void findAverageWeightEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findAverageWeight().isEmpty());\n    }\n\n    @Test\n    public void findMinWeightTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble minWeight1 = calculator.findMinWeight();\n\n        assertTrue(minWeight1.isPresent());\n        assertThat(minWeight1.getAsDouble(), closeTo(0.080, 0.001));\n\n        calculator = new StatisticsCalculator(controller, weightFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble minWeight2 = calculator.findMinWeight();\n\n        assertTrue(minWeight2.isPresent());\n        assertThat(minWeight2.getAsDouble(), closeTo(1.400, 0.001));\n    }\n\n    @Test\n    public void findMinWeightEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findMinWeight().isEmpty());\n    }\n\n    @Test\n    public void findMaxWeightTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble maxWeight1 = calculator.findMaxWeight();\n\n        assertTrue(maxWeight1.isPresent());\n        assertThat(maxWeight1.getAsDouble(), closeTo(5.000, 0.001));\n\n        calculator = new StatisticsCalculator(controller, weightFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble maxWeight2 = calculator.findMaxWeight();\n\n        assertTrue(maxWeight2.isPresent());\n        assertThat(maxWeight2.getAsDouble(), closeTo(1.500, 0.001));\n    }\n\n    @Test\n    public void findMaxWeightEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findMaxWeight().isEmpty());\n    }\n\n    @Test\n    public void findAverageWingspanTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble avgWingspan1 = calculator.findAverageWingspan();\n\n        assertTrue(avgWingspan1.isPresent());\n        assertThat(avgWingspan1.getAsDouble(), closeTo(70.129, 0.001));\n\n        calculator = new StatisticsCalculator(controller, wingspanFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble avgWingspan2 = calculator.findAverageWingspan();\n\n        assertTrue(avgWingspan2.isPresent());\n        assertThat(avgWingspan2.getAsDouble(), closeTo(63.000, 0.001));\n    }\n\n    @Test\n    public void findAverageWingspanEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findAverageWingspan().isEmpty());\n    }\n\n    @Test\n    public void findMinWingspanTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble minWingspan1 = calculator.findMinWingspan();\n\n        assertTrue(minWingspan1.isPresent());\n        assertThat(minWingspan1.getAsDouble(), closeTo(15.000, 0.001));\n\n        calculator = new StatisticsCalculator(controller, wingspanFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble minWingspan2 = calculator.findMinWingspan();\n\n        assertTrue(minWingspan2.isPresent());\n        assertThat(minWingspan2.getAsDouble(), closeTo(60.000, 0.001));\n    }\n\n    @Test\n    public void findMinWingspanEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findMinWingspan().isEmpty());\n    }\n\n    @Test\n    public void findMaxWingspanTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble maxWingspan1 = calculator.findMaxWingspan();\n\n        assertTrue(maxWingspan1.isPresent());\n        assertThat(maxWingspan1.getAsDouble(), closeTo(143.000, 0.001));\n\n        calculator = new StatisticsCalculator(controller, wingspanFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        OptionalDouble maxWingspan2 = calculator.findMaxWingspan();\n\n        assertTrue(maxWingspan2.isPresent());\n        assertThat(maxWingspan2.getAsDouble(), closeTo(72.000, 0.001));\n    }\n\n    @Test\n    public void findMaxWingspanEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findMaxWingspan().isEmpty());\n    }\n\n    @Test\n    public void findWingspanDataTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Double> data = calculator.getWingspanData();\n\n        assertFalse(data.isEmpty());\n        assertThat(data.get(0), closeTo(45.000, 0.001));\n        assertThat(data.get(1), closeTo(60.000, 0.001));\n        assertThat(data.get(data.size() - 1), closeTo(54.000, 0.001));\n    }\n\n    @Test\n    public void findWingspanDataEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.getWingspanData().isEmpty());\n    }\n\n    @Test\n    public void getWeightDataInGramsTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Double> data = calculator.getWeightDataInGrams();\n\n        assertFalse(data.isEmpty());\n        assertThat(data.get(0), closeTo(350.000, 0.001));\n        assertThat(data.get(1), closeTo(5000.000, 0.001));\n        assertThat(data.get(data.size() - 1), closeTo(250.000, 0.001));\n    }\n\n    @Test\n    public void getWeightDataInGramsEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.getWeightDataInGrams().isEmpty());\n    }\n\n    @Test\n    public void getSampleTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getSample(10);\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(10));\n\n        birds = calculator.getSample(1);\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(1));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(0.35, 0.01));\n        assertThat(bird.getWingspan(), closeTo(45.00, 0.01));\n        assertThat(bird.getSex(), is(MALE));\n        assertThat(bird.getAge(), is(YOUNGLING));\n\n        birds = calculator.getSample(0);\n        assertTrue(birds.isEmpty());\n    }\n\n    @Test\n    public void getSampleEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n        List<Bird> birds = calculator.getSample(10);\n\n        assertTrue(birds.isEmpty());\n    }\n\n    @Test\n    public void findSampleBirdTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        Optional<Bird> eurasian_bullfinch = calculator.findSampleBird(EURASIAN_BULLFINCH, FEMALE, ADULT);\n\n        assertTrue(eurasian_bullfinch.isPresent());\n\n        Bird bird = eurasian_bullfinch.get();\n\n        assertThat(bird.getSpecies(), is(EURASIAN_BULLFINCH));\n        assertThat(bird.getWeight(), closeTo(0.100, 0.001));\n        assertThat(bird.getWingspan(), closeTo(20.000, 0.001));\n        assertThat(bird.getSex(), is(FEMALE));\n        assertThat(bird.getAge(), is(ADULT));\n\n        assertTrue(calculator.findSampleBird(BIRD, FEMALE, ADULT).isEmpty());\n    }\n\n    @Test\n    public void findSampleBirdEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.findSampleBird(EURASIAN_BULLFINCH, FEMALE, ADULT).isEmpty());\n    }\n\n    @Test\n    public void getAllEncounteredSpeciesTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        Set<String> species1 = calculator.getAllEncounteredSpecies();\n\n        assertFalse(species1.isEmpty());\n        assertThat(species1.size(), is(4));\n        assertTrue(species1.contains(SEAGULL));\n        assertTrue(species1.contains(MAGPIE));\n        assertTrue(species1.contains(EURASIAN_BULLFINCH));\n        assertTrue(species1.contains(CORMORANT));\n\n        calculator = new StatisticsCalculator(controller, wingspanFilter);\n        calculator.prepareBirdData(\"files/bird-data.csv\");\n        Set<String> species2 = calculator.getAllEncounteredSpecies();\n\n        assertFalse(species2.isEmpty());\n        assertThat(species2.size(), is(2));\n        assertTrue(species2.contains(CORMORANT));\n        assertTrue(species2.contains(MAGPIE));\n    }\n\n    @Test\n    public void getAllEncounteredSpeciesEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.getAllEncounteredSpecies().isEmpty());\n    }\n\n    @Test\n    public void getLargeBirdsTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        List<Bird> birds = calculator.getLargeBirds(30);\n\n        assertFalse(birds.isEmpty());\n        assertThat(birds.size(), is(1));\n\n        Bird bird = birds.get(0);\n\n        assertThat(bird.getSpecies(), is(CORMORANT));\n        assertThat(bird.getWeight(), closeTo(5.000, 0.000));\n        assertThat(bird.getWingspan(), closeTo(60.000, 0.000));\n        assertThat(bird.getSex(), is(FEMALE));\n        assertThat(bird.getAge(), is(ADULT));\n    }\n\n    @Test\n    public void getLargeBirdsEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.getLargeBirds(30).isEmpty());\n    }\n\n    @Test\n    public void mapBirdsToSpeciesTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(BIRD_DATA_CSV);\n        Map<String, List<Bird>> map = calculator.mapBirdsToSpecies();\n\n        assertFalse(map.isEmpty());\n        assertThat(map.size(), is(4));\n        assertTrue(map.containsKey(CORMORANT));\n        assertTrue(map.containsKey(MAGPIE));\n        assertTrue(map.containsKey(SEAGULL));\n        assertTrue(map.containsKey(EURASIAN_BULLFINCH));\n        assertThat(map.get(CORMORANT).size(), is(5));\n        assertThat(map.get(MAGPIE).size(), is(9));\n        assertThat(map.get(SEAGULL).size(), is(9));\n        assertThat(map.get(EURASIAN_BULLFINCH).size(), is(8));\n    }\n\n    @Test\n    public void mapBirdsToSpeciesEmptyTest() {\n        calculator = new StatisticsCalculator(controller, genericFilter);\n        calculator.prepareBirdData(EMPTY_CSV);\n\n        assertTrue(calculator.mapBirdsToSpecies().isEmpty());\n    }\n}\n","isTest":true},{"path":"src/files/bird-data.csv","contents":"cormorant,0.35,45,male,youngling\ncormorant,5.0,60,female,adult\ncormorant,4.23,100,male,adult\ncormorant,2.05,60,female,adult\ncormorant,1.6,72,unknown,youngling\neurasian bullfinch,0.12,20,male,adult\neurasian bullfinch,0.10,20,female,adult\neurasian bullfinch,0.16,18,female,adult\neurasian bullfinch,0.08,15,unknown,youngling\neurasian bullfinch,0.08,16,male,youngling\neurasian bullfinch,0.09,17,female,youngling\neurasian bullfinch,0.16,18,male,adult\neurasian bullfinch,0.18,19,female,adult\nseagull,1.5,120,male,adult\nseagull,1.6,143,male,adult\nseagull,1.4,133,unknown,adult\nseagull,1.45,134,female,adult\nseagull,1.45,132,female,adult\nseagull,1.52,140,male,adult\nseagull,1.56,141,male,adult\nseagull,1.58,142,male,adult\nseagull,1.59,138,male,adult\nmagpie,0.22,52,female,adult\nmagpie,0.25,60,male,adult\nmagpie,0.23,45,male,youngling\nmagpie,0.24,42,male,youngling\nmagpie,0.22,55,female,adult\nmagpie,0.25,56,female,adult\nmagpie,0.25,54,male,adult\nmagpie,0.25,53,unknown,adult\nmagpie,0.25,54,male,adult","isTest":true},{"path":"src/files/empty.csv","contents":"","isTest":true},{"path":"EX11Birdwatching.iml","contents":"<file in binary format or unable to read file>","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/bird/Bird.java","contents":"package ee.taltech.iti0202.birdwatching.bird;\n\npublic class Bird {\n\n    private String species;\n    private double weight;\n    private double wingspan;\n    private Age age;\n    private Sex sex;\n\n\n    public Bird(String species, double weight, double wingspan, Age age, Sex sex) {\n        this.age = age;\n        this.sex = sex;\n        this.species = species;\n        this.weight = weight;\n        this.wingspan = wingspan;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public double getWingspan() {\n        return wingspan;\n    }\n\n    public Age getAge() {\n        return age;\n    }\n\n    public Sex getSex() {\n        return sex;\n    }\n\n    public enum Age {\n        ADULT,\n        YOUNGLING\n    }\n\n    public enum Sex {\n        MALE,\n        FEMALE,\n        UNKNOWN\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/bird/BirdBuilder.java","contents":"package ee.taltech.iti0202.birdwatching.bird;\n\npublic class BirdBuilder {\n\n    private String species;\n    private double weight;\n    private double wingspan;\n    private Bird.Age age;\n    private Bird.Sex sex;\n\n    public BirdBuilder setAge(Bird.Age age) {\n        this.age = age;\n        return this;\n    }\n\n    public BirdBuilder setSex(Bird.Sex sex) {\n        this.sex = sex;\n        return this;\n    }\n\n    public BirdBuilder setSpecies(String species) {\n        this.species = species;\n        return this;\n    }\n\n    public BirdBuilder setWeight(double weight) {\n        this.weight = weight;\n        return this;\n    }\n\n    public BirdBuilder setWingspan(double wingspan) {\n        this.wingspan = wingspan;\n        return this;\n    }\n\n    public Bird build() {\n        return new Bird(species, weight, wingspan, age, sex);\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/bird/BirdDataController.java","contents":"package ee.taltech.iti0202.birdwatching.bird;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BirdDataController {\n    private List<Bird> birds;\n\n    public void readBirdDataFromCsvFile(String filename) throws BirdDataException {\n        birds = new ArrayList<>();\n\n        try (BufferedReader br = Files.newBufferedReader(Paths.get(filename))) {\n\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] var = line.split(\",\");\n                birds.add(new BirdBuilder()\n                        .setSpecies(var[0])\n                        .setWeight(Double.parseDouble(var[1]))\n                        .setWingspan(Double.parseDouble(var[2]))\n                        .setSex(Bird.Sex.valueOf(var[3].toUpperCase()))\n                        .setAge(Bird.Age.valueOf(var[4].toUpperCase()))\n                        .build());\n            }\n\n        } catch (IOException e) {\n            throw new BirdDataException(e);\n        }\n    }\n\n    public List<Bird> getBirds() {\n        return birds;\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/bird/BirdDataException.java","contents":"package ee.taltech.iti0202.birdwatching.bird;\n\npublic class BirdDataException extends Exception {\n    public BirdDataException(Exception exe) {\n        super(\"Error handling bird data\", exe);\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/AgeFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class AgeFilter implements BirdFilter {\n\n    private final Bird.Age age;\n\n    public AgeFilter(Bird.Age age) {\n        this.age = age;\n    }\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds.stream().filter(x -> x.getAge().equals(age)).collect(Collectors.toList());\n    }\n}\n\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/BirdFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\n\npublic interface BirdFilter {\n    List<Bird> getSuitableBirds(List<Bird> birds);\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/GenericFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\n\npublic class GenericFilter implements BirdFilter {\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds;\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/SexFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SexFilter implements BirdFilter {\n\n    private final Bird.Sex sex;\n\n    public SexFilter(Bird.Sex sex) {\n        this.sex = sex;\n    }\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds.stream().filter(x -> x.getSex().equals(sex)).collect(Collectors.toList());\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/SpeciesFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SpeciesFilter implements BirdFilter {\n\n    private final String spieces;\n\n    public SpeciesFilter(String spieces) {\n        this.spieces = spieces;\n    }\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds.stream().filter(x -> x.getSpecies().equals(spieces)).collect(Collectors.toList());\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/WeightFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class WeightFilter implements BirdFilter {\n\n    private final double minimum;\n    private final double maximum;\n\n    public WeightFilter(double minimum, double maximum) {\n        this.maximum = maximum;\n        this.minimum = minimum;\n    }\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds.stream()\n                .filter(x -> x.getWeight() >= minimum)\n                .filter(y -> y.getWeight() <= maximum)\n                .collect(Collectors.toList());\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/filter/WingspanFilter.java","contents":"package ee.taltech.iti0202.birdwatching.filter;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class WingspanFilter implements BirdFilter {\n\n    private final double minimum;\n    private final double maximum;\n\n    public WingspanFilter(double minimum, double maximum) {\n        this.maximum = maximum;\n        this.minimum = minimum;\n    }\n\n    @Override\n    public List<Bird> getSuitableBirds(List<Bird> birds) {\n        return birds.stream()\n                .filter(x -> x.getWingspan() >= minimum)\n                .filter(y -> y.getWingspan() <= maximum)\n                .collect(Collectors.toList());\n    }\n}\n","isTest":false},{"path":"src/ee/taltech/iti0202/birdwatching/statistics/StatisticsCalculator.java","contents":"package ee.taltech.iti0202.birdwatching.statistics;\n\nimport ee.taltech.iti0202.birdwatching.bird.Bird;\nimport ee.taltech.iti0202.birdwatching.bird.BirdDataController;\nimport ee.taltech.iti0202.birdwatching.bird.BirdDataException;\nimport ee.taltech.iti0202.birdwatching.filter.BirdFilter;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.OptionalDouble;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class StatisticsCalculator {\n\n    private List<Bird> birds;\n    private BirdDataController controller;\n    private BirdFilter filter;\n\n    public StatisticsCalculator(BirdDataController controller, BirdFilter filter) {\n        this.birds = new ArrayList<>();\n        this.controller = controller;\n        this.filter = filter;\n    }\n\n    public void prepareBirdData(String filename) {\n        try {\n            controller.readBirdDataFromCsvFile(filename);\n            birds = controller.getBirds();\n        } catch (BirdDataException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public List<Bird> getBirds() {\n        return filter.getSuitableBirds(birds);\n    }\n\n    public long countBirds() {\n        return getBirds().size();\n    }\n\n    public OptionalDouble findAverageWeight() {\n        return getBirds().stream().mapToDouble(Bird::getWeight).average();\n    }\n\n    public OptionalDouble findMinWeight() {\n        return getBirds().stream().mapToDouble(Bird::getWeight).min();\n    }\n\n    public OptionalDouble findMaxWeight() {\n        return getBirds().stream().mapToDouble(Bird::getWeight).max();\n    }\n\n    public OptionalDouble findAverageWingspan() {\n        return getBirds().stream().mapToDouble(Bird::getWingspan).average();\n    }\n\n    public OptionalDouble findMinWingspan() {\n        return getBirds().stream().mapToDouble(Bird::getWingspan).min();\n    }\n\n    public OptionalDouble findMaxWingspan() {\n        return getBirds().stream().mapToDouble(Bird::getWingspan).max();\n    }\n\n    public List<Double> getWingspanData() {\n        return getBirds().stream().map(Bird::getWingspan).collect(Collectors.toList());\n    }\n\n    public List<Double> getWeightDataInGrams() {\n        return getBirds().stream().map(Bird::getWeight).map(x -> x * 1000).collect(Collectors.toList());\n    }\n\n    public List<Bird> getSample(int sampleSize) {\n        return getBirds().stream().limit(sampleSize).collect(Collectors.toList());\n    }\n\n    public Optional<Bird> findSampleBird(String species, Bird.Sex sex, Bird.Age age) {\n        return getBirds().stream()\n                .filter(x -> x.getSpecies().equals(species))\n                .filter(x -> x.getSex().equals(sex))\n                .filter(x -> x.getAge().equals(age))\n                .findFirst();\n    }\n\n    public Set<String> getAllEncounteredSpecies() {\n        return getBirds().stream().map(Bird::getSpecies).collect(Collectors.toSet());\n    }\n\n    public List<Bird> getLargeBirds(int skipCount) {\n        return getBirds().stream()\n                .sorted(Comparator.comparing(Bird::getWeight))\n                .skip(skipCount)\n                .collect(Collectors.toList());\n    }\n\n    public Map<String, List<Bird>> mapBirdsToSpecies() {\n        return getAllEncounteredSpecies().stream()\n                .collect(Collectors.toMap(\n                        entry -> entry,\n                        entry -> getBirds().stream()\n                                .filter(x -> x.getSpecies().equals(entry))\n                                .collect(Collectors.toList())\n                ));\n    }\n\n}\n","isTest":false}],"identifier":"FILEWRITER","result":"SUCCESS"},{"code":102,"diagnosticList":[],"identifier":"COMPILER","result":"SUCCESS"},{"code":500,"identifier":"TESTNG","result":"SUCCESS","securityViolation":false,"testContexts":[{"unitTests":[{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"readBirdDataFromCsvFileFileNotFoundTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findWingspanDataTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":18,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getAllEncounteredSpeciesEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":6,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"countBirdsTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getSampleTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findWingspanDataEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"speciesFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":21,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMinWeightTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getSampleEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":14,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"genericFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getLargeBirdsTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":42,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMaxWeightEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":10,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getBirdsEmptyFileTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":22,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getLargeBirdsEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMinWingspanTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":15,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findAverageWingspanTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":31,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findAverageWeightEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":7,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"mapBirdsToSpeciesTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":9,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"mapBirdsToSpeciesEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":28,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"countBirdsEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":105,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMaxWingspanEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getWeightDataInGramsEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":4,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findAverageWeightTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":20,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"weightFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getWeightDataInGramsTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"readBirdDataFromCsvFileTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"readBirdDataFromCsvFileFileIsEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":15,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findSampleBirdTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":4,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMinWeightEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":91,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"ageFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":20,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMaxWingspanTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"getAllEncounteredSpeciesTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":14,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findAverageWingspanEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":85,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findSampleBirdEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMinWingspanEmptyTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"wingspanFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":6,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"sexFilterTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"findMaxWeightTest","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]}],"name":"ee.taltech.iti0202.birdwatching.BirdwatchingTest (TestNG)","file":"ee.taltech.iti0202.birdwatching.BirdwatchingTest","startDate":1574748039939,"endDate":1574748044558,"mode":"VERBOSE","welcomeMessage":"","identifier":1,"count":38,"weight":38,"passedCount":38,"grade":100.0}],"totalCount":38,"totalGrade":100.0,"totalPassedCount":38},{"code":2147483647,"identifier":"REPORT","output":"TEST RESULTS\n\n* Checkstyle report *\n\nFound errors: 0\n\n\n\n\n* Compiler report *\n\nCompilation succeeded.\n\n* Unit tests *\n\n\nee.taltech.iti0202.birdwatching.BirdwatchingTest (TestNG)\nTue Nov 26 06:00:44 UTC 2019\n ---\nSUCCESS: readBirdDataFromCsvFileFileNotFoundTest\n\t3 msecs, weight: 1 unit\nSUCCESS: findWingspanDataTest\n\t1 msec, weight: 1 unit\nSUCCESS: getAllEncounteredSpeciesEmptyTest\n\t18 msecs, weight: 1 unit\nSUCCESS: countBirdsTest\n\t6 msecs, weight: 1 unit\nSUCCESS: getSampleTest\n\t1 msec, weight: 1 unit\nSUCCESS: findWingspanDataEmptyTest\n\t2 msecs, weight: 1 unit\nSUCCESS: speciesFilterTest\n\t1 msec, weight: 1 unit\nSUCCESS: findMinWeightTest\n\t21 msecs, weight: 1 unit\nSUCCESS: getSampleEmptyTest\n\t3 msecs, weight: 1 unit\nSUCCESS: genericFilterTest\n\t14 msecs, weight: 1 unit\nSUCCESS: getLargeBirdsTest\n\t2 msecs, weight: 1 unit\nSUCCESS: findMaxWeightEmptyTest\n\t42 msecs, weight: 1 unit\nSUCCESS: getBirdsEmptyFileTest\n\t10 msecs, weight: 1 unit\nSUCCESS: getLargeBirdsEmptyTest\n\t22 msecs, weight: 1 unit\nSUCCESS: findMinWingspanTest\n\t2 msecs, weight: 1 unit\nSUCCESS: findAverageWingspanTest\n\t15 msecs, weight: 1 unit\nSUCCESS: findAverageWeightEmptyTest\n\t31 msecs, weight: 1 unit\nSUCCESS: mapBirdsToSpeciesTest\n\t7 msecs, weight: 1 unit\nSUCCESS: mapBirdsToSpeciesEmptyTest\n\t9 msecs, weight: 1 unit\nSUCCESS: countBirdsEmptyTest\n\t28 msecs, weight: 1 unit\nSUCCESS: findMaxWingspanEmptyTest\n\t105 msecs, weight: 1 unit\nSUCCESS: getWeightDataInGramsEmptyTest\n\t2 msecs, weight: 1 unit\nSUCCESS: findAverageWeightTest\n\t4 msecs, weight: 1 unit\nSUCCESS: weightFilterTest\n\t20 msecs, weight: 1 unit\nSUCCESS: getWeightDataInGramsTest\n\t2 msecs, weight: 1 unit\nSUCCESS: readBirdDataFromCsvFileTest\n\t3 msecs, weight: 1 unit\nSUCCESS: readBirdDataFromCsvFileFileIsEmptyTest\n\t1 msec, weight: 1 unit\nSUCCESS: findSampleBirdTest\n\t15 msecs, weight: 1 unit\nSUCCESS: findMinWeightEmptyTest\n\t4 msecs, weight: 1 unit\nSUCCESS: ageFilterTest\n\t91 msecs, weight: 1 unit\nSUCCESS: findMaxWingspanTest\n\t20 msecs, weight: 1 unit\nSUCCESS: getAllEncounteredSpeciesTest\n\t1 msec, weight: 1 unit\nSUCCESS: findAverageWingspanEmptyTest\n\t14 msecs, weight: 1 unit\nSUCCESS: findSampleBirdEmptyTest\n\t85 msecs, weight: 1 unit\nSUCCESS: findMinWingspanEmptyTest\n\t1 msec, weight: 1 unit\nSUCCESS: wingspanFilterTest\n\t1 msec, weight: 1 unit\nSUCCESS: sexFilterTest\n\t6 msecs, weight: 1 unit\nSUCCESS: findMaxWeightTest\n\t2 msecs, weight: 1 unit\n\nPassed unit tests: 38/38\nFailed unit tests: 0\nSkipped unit tests: 0\nGrade: 100.0%\n\nOverall grade: 100.0%\n","result":"SUCCESS"}]}