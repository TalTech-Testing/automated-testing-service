{"version":"2.0, build 20191126_034138","type":"hodor_studenttester","contentRoot":"/student","testRoot":"/tester","results":[{"code":101,"count":0,"errors":[],"identifier":"CHECKSTYLE","result":"SUCCESS"},{"code":103,"files":[{"path":"checkstyle.xml","contents":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n<!--\n\n  Checkstyle configuration that checks the sun coding conventions from:\n\n    - the Java Language Specification at\n      http://java.sun.com/docs/books/jls/second_edition/html/index.html\n\n    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/\n\n    - the Javadoc guidelines at\n      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html\n\n    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html\n\n    - some best practices\n\n  Checkstyle is very configurable. Be sure to read the documentation at\n  http://checkstyle.sf.net (or in your downloaded distribution).\n\n  Most Checks are configurable, be sure to consult the documentation.\n\n  To completely disable a check, just comment it out or delete it from the file.\n\n  Finally, it is worth reading the documentation.\n\n-->\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <!--\n        If you set the basedir property below, then all reported file\n        names will be relative to the specified directory. See\n        http://checkstyle.sourceforge.net/5.x/config.html#Checker\n\n        <property name=\"basedir\" value=\"${basedir}\"/>\n    -->\n\n    <!-- Checks that a package-info.java file exists for each package.     -->\n    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->\n    <!--\n    <module name=\"JavadocPackage\"/>\n    -->\n\n    <!-- Checks whether files end with a new line.                        -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->\n    <module name=\"NewlineAtEndOfFile\">\n        <property name=\"fileExtensions\" value=\"java, xml, py, css, fxml\"/>\n    </module>\n\n    <!-- Checks that property files contain the same keys.         -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->\n    <module name=\"Translation\"/>\n\n    <!-- Checks for Size Violations.                    -->\n    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n    <module name=\"FileLength\"/>\n\n    <!-- Checks for whitespace                               -->\n    <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n    <module name=\"FileTabCharacter\"/>\n\n    <!-- Miscellaneous other checks.                   -->\n    <!-- See http://checkstyle.sf.net/config_misc.html -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"\\s+$\"/>\n        <property name=\"minimum\" value=\"0\"/>\n        <property name=\"maximum\" value=\"0\"/>\n        <property name=\"message\" value=\"Line has trailing spaces.\"/>\n    </module>\n\n    <module name=\"TreeWalker\">\n\n        <!-- Checks for Javadoc comments.                     -->\n        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n\n\n        <!-- Checks for Naming Conventions.                  -->\n        <!-- See http://checkstyle.sf.net/config_naming.html -->\n        <module name=\"ConstantName\"/>\n        <!--\n            <module name=\"LocalFinalVariableName\"/>\n        -->\n        <module name=\"LocalVariableName\"/>\n        <module name=\"MemberName\"/>\n        <module name=\"MethodName\"/>\n        <module name=\"PackageName\"/>\n        <module name=\"ParameterName\"/>\n        <module name=\"StaticVariableName\"/>\n        <module name=\"TypeName\"/>\n\n\n        <!-- Checks for Headers                                -->\n        <!-- See http://checkstyle.sf.net/config_header.html   -->\n        <!-- <module name=\"Header\">                            -->\n        <!-- The follow property value demonstrates the ability     -->\n        <!-- to have access to ANT properties. In this case it uses -->\n        <!-- the ${basedir} property to allow Checkstyle to be run  -->\n        <!-- from any directory within a project. See property      -->\n        <!-- expansion,                                             -->\n        <!-- http://checkstyle.sf.net/config.html#properties        -->\n        <!-- <property                                              -->\n        <!--     name=\"headerFile\"                                  -->\n        <!--     value=\"${basedir}/java.header\"/>                   -->\n        <!-- </module> -->\n\n        <!-- Following interprets the header file as regular expressions. -->\n        <!-- <module name=\"RegexpHeader\"/>                                -->\n\n\n        <!-- Checks for imports                              -->\n        <!-- See http://checkstyle.sf.net/config_import.html -->\n        <module name=\"AvoidStarImport\"/>\n        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n        <module name=\"RedundantImport\"/>\n        <module name=\"UnusedImports\"/>\n\n\n        <!-- Checks for Size Violations.                    -->\n        <!-- See http://checkstyle.sf.net/config_sizes.html -->\n        <module name=\"LineLength\">\n            <property name=\"max\" value=\"120\"/>\n        </module>\n        <module name=\"MethodLength\"/>\n        <module name=\"ParameterNumber\"/>\n\n\n        <!-- Checks for whitespace                               -->\n        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n        <module name=\"EmptyForIteratorPad\"/>\n        <module name=\"GenericWhitespace\"/>\n        <module name=\"MethodParamPad\"/>\n        <module name=\"NoWhitespaceAfter\"/>\n        <module name=\"NoWhitespaceBefore\"/>\n        <module name=\"OperatorWrap\"/>\n        <module name=\"ParenPad\"/>\n        <module name=\"TypecastParenPad\"/>\n        <module name=\"WhitespaceAfter\"/>\n        <module name=\"WhitespaceAround\"/>\n\n\n        <!-- Modifier Checks                                    -->\n        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n        <module name=\"ModifierOrder\"/>\n        <module name=\"RedundantModifier\"/>\n\n\n        <!-- Checks for blocks. You know, those {}'s         -->\n        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n        <module name=\"AvoidNestedBlocks\"/>\n        <module name=\"EmptyBlock\"/>\n        <module name=\"LeftCurly\"/>\n        <module name=\"NeedBraces\">\n            <property name=\"allowSingleLineStatement\" value=\"true\"/>\n        </module>\n        <module name=\"RightCurly\"/>\n\n\n        <!-- Checks for common coding problems               -->\n        <!-- See http://checkstyle.sf.net/config_coding.html -->\n        <!-- module name=\"AvoidInlineConditionals\"/ -->\n        <module name=\"EmptyStatement\"/>\n        <module name=\"EqualsHashCode\"/>\n        <!--\n            <module name=\"HiddenField\">\n                <property name=\"ignoreSetter\" value=\"true\"/>\n        </module>\n        -->\n        <module name=\"IllegalInstantiation\"/>\n        <module name=\"InnerAssignment\"/>\n        <module name=\"MagicNumber\">\n            <property name=\"ignoreNumbers\" value=\"-5,-4,-3,-2,-1,0,1,2,3,4,5,10,100,1000\"/>\n        </module>\n        <module name=\"MissingSwitchDefault\"/>\n        <module name=\"SimplifyBooleanExpression\"/>\n        <module name=\"SimplifyBooleanReturn\"/>\n\n        <!-- Checks for class design                         -->\n        <!-- See http://checkstyle.sf.net/config_design.html -->\n        <!--\n            <module name=\"DesignForExtension\"/>\n        -->\n        <module name=\"FinalClass\"/>\n        <!--\n            <module name=\"HideUtilityClassConstructor\"/>\n        -->\n        <module name=\"InterfaceIsType\"/>\n        <!--\n            <module name=\"VisibilityModifier\"/>\n        -->\n\n\n        <!-- Miscellaneous other checks.                   -->\n        <!-- See http://checkstyle.sf.net/config_misc.html -->\n        <module name=\"ArrayTypeStyle\"/>\n        <!--\n            <module name=\"FinalParameters\"/>\n        -->\n        <module name=\"TodoComment\"/>\n        <module name=\"UpperEll\"/>\n\n    </module>\n\n\n</module>","isTest":true},{"path":"src/ee/taltech/iti0202/sum100/Sum100Test.java","contents":"package ee.taltech.iti0202.sum100;\n\nimport ee.ttu.java.studenttester.annotations.TestContextConfiguration;\nimport ee.ttu.java.studenttester.enums.ReportMode;\nimport org.testng.annotations.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertTrue;\n\n@TestContextConfiguration(mode = ReportMode.VERBOSE)\npublic class Sum100Test {\n\n    List<String> sums = new ArrayList<>();\n\n    public Sum100Test() {\n        System.out.println(\"calc sums\");\n        sums = Sum100.calcSums();\n    }\n\n    @Test(timeOut = 1000)\n    public void test1() {\n        assertTrue(sums.contains(\"1+2+3-4+5+6+78+9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test2() {\n        assertTrue(sums.contains(\"1+2+34-5+67-8+9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test3() {\n        assertTrue(sums.contains(\"1+23-4+5+6+78-9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test4() {\n        assertTrue(sums.contains(\"1+23-4+56+7+8+9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test5() {\n        assertTrue(sums.contains(\"12+3+4+5-6-7+89\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test6() {\n        assertTrue(sums.contains(\"12+3-4+5+67+8+9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test7() {\n        assertTrue(sums.contains(\"12-3-4+5-6+7+89\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test8() {\n        assertTrue(sums.contains(\"123+4-5+67-89\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test9() {\n        assertTrue(sums.contains(\"123+45-67+8-9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test10() {\n        assertTrue(sums.contains(\"123-4-5-6-7+8-9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test11() {\n        assertTrue(sums.contains(\"123-45-67+89\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void testTricky12() {\n        assertTrue(sums.contains(\"-1+2-3+4+5+6+78+9\"));\n    }\n\n    @Test(timeOut = 1000)\n    public void test13() {\n        assertEquals(sums.size(), 12);\n    }\n\n}\n\n","isTest":true},{"path":"src/sumto100.md","contents":"# EX12 Sum 100\n\nKaust Gitis: `EX12Sum100`\n\nPakk Gitis: `ee.taltech.iti0202.sum100`\n\nÜlesande eesmärk on kirjutada rekursiivne meetod, mis paneb arvude 1-9 ette kas `+` märgi, `-` märgi või mitte midagi nii, et moodustunud tehte summa oleks täpselt 100.\n\n---\n\nÜlesande lahendamiseks pole süvendatud matemaatika teadmised ega matemaatiliste võtete kasutamine üldsegi oluline -\nkoolis omandatud teadmised on ülesande lahenduseks piisavad.\n\nEesmärk on koostada loetelu arvudest `1-9` nii, et pannes nende ette märgid kas `+`, `-` või `mitte midagi`, \npeaks tulemuseks kujunema arv 100.\n\nTäheldatav on see, et liites omavahel kõik 9 numbrit (1+2+3+4+5+6+7+8+9), ülesannet me sellisel juhul lahendatud ei saa. \nOmeti, ühendades numbrid 2 ja 3 ning 7 ja 8, saame järgmise kombinatsiooni: `1+23+4+5+6+78-9=100`. \n\n**Arvud peavad olema alati järjest ja igat arvu üks kord: `123456789`**. Teie programm peab sinna lisama vajalikud tehtemärgid (+ ja -) nii, et tehte tulemus oleks 100.\n\nRealiseerige meetod `calcSums()` - see peaks tagastama listi, kus oleksid erinevad sõnena variandid sellest, \nkuidas arvude 1-9 loetelus summa 100 saada. Järjekord pole listis oluline.\n\nFormaat peab olema järgmine:\n- tühikuid ei ole\n- sõne koosneb vaid arvudest, `+` ja `-` märkidest: `1+23+4+5+6+78-9`.\n\n**Antud ülesandes peab tingimata kasutama rekursiooni, ehkki ülesannet saab lahendada ka iteratiivse meetodiga. Kaitsmisel kontrollitakse seda, et rekursioon oleks kasutatud.**\n\n**Globaalsete muutujate kasutamine ei ole lubatud.** See tähendab, et ei ole mõtet luua staatilist muutujat, kuhu salvestate mingeid vahetulemusi. Pigem andke need muutujad meetodisse kaasa.\n\n```java\npackage ee.taltech.iti0202.sum100;\n\nimport java.util.List;\n\npublic class Sum100 {\n\n  public static List<String> calcSums() {\n    return List.of(); // TODO\n  }\n}\n```","isTest":true},{"path":"EX12Sum100.iml","contents":"<file in binary format or unable to read file>","isTest":false},{"path":"src/ee/taltech/iti0202/sum100/Sum100.java","contents":"package ee.taltech.iti0202.sum100;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Stack;\n\npublic class Sum100 {\n\n    public static final int NUMBERS_IN_LIST = 9;\n    public static final int DESIRED_SUM = 100;\n\n    public static List<String> calcSums() {\n        return possibilities(new char[]{'+', '-', ' '}, NUMBERS_IN_LIST, \"\", new HashSet<>());\n    }\n\n    public static List<String> possibilities(char[] c, int n, String start, Set<String> answers) {\n        if (start.length() >= n) {\n            Stack<Integer> integerStack = new Stack<>();\n            integerStack.add(0);\n            List<Integer> curIteration = curIteratorBuilder(start.toCharArray(), 1, integerStack, 1);\n            if (curIteration.stream().mapToInt(Integer::intValue).sum() == DESIRED_SUM) {\n                if (curIteration.get(0).equals(0)) curIteration.remove(0);\n                answers.add(answerBuilder(curIteration));\n            }\n        } else {\n            summonThreads(c, n, start, answers, 0);\n        }\n        return new ArrayList<>(answers);\n    }\n\n    private static void summonThreads(char[] c, int n, String start, Set<String> answers, int i) {\n        if (i != c.length) {\n            possibilities(c, n, start + c[i], answers);\n            summonThreads(c, n, start, answers, i + 1);\n        }\n    }\n\n    private static List<Integer> curIteratorBuilder(char[] start, int i, Stack<Integer> curIteration, int multiplier) {\n        if (i == 10) {\n            return curIteration;\n        }\n        switch (start[i - 1]) {\n            case ' ':\n                curIteration.add((i * multiplier + curIteration.pop() * 10));\n                break;\n            case '+':\n                multiplier = 1;\n                curIteration.add(i);\n                break;\n            case '-':\n                multiplier = -1;\n                curIteration.add(i * -1);\n                break;\n            default:\n                break;\n        }\n        return curIteratorBuilder(start, i + 1, curIteration, multiplier);\n    }\n\n    private static String answerBuilder(List<Integer> curIteration) {\n        if (curIteration.size() == 0) {\n            return \"\";\n        } else {\n            Integer elem = curIteration.remove(0);\n            return (elem > 0 && !String.valueOf(elem).startsWith(\"1\") ? \"+\" : \"\") + elem + answerBuilder(curIteration);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(calcSums());\n    }\n}\n","isTest":false}],"identifier":"FILEWRITER","result":"SUCCESS"},{"code":102,"diagnosticList":[],"identifier":"COMPILER","result":"SUCCESS"},{"code":500,"identifier":"TESTNG","result":"SUCCESS","securityViolation":false,"testContexts":[{"unitTests":[{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test8","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":8,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test3","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":5,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"testTricky12","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":21,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test11","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test13","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test6","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":1,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test5","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":15,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test4","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":3,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test7","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":93,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test1","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":25,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test10","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":15,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test9","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]},{"status":"PASSED","weight":1,"description":"","printExceptionMessage":false,"printStackTrace":false,"timeElapsed":2,"groupsDependedUpon":[],"methodsDependedUpon":[],"name":"test2","stackTrace":null,"exceptionClass":null,"exceptionMessage":null,"stdout":[],"stderr":[]}],"name":"ee.taltech.iti0202.sum100.Sum100Test (TestNG)","file":"ee.taltech.iti0202.sum100.Sum100Test","startDate":1574748040432,"endDate":1574748044055,"mode":"VERBOSE","welcomeMessage":"","identifier":1,"count":13,"weight":13,"passedCount":13,"grade":100.0}],"totalCount":13,"totalGrade":100.0,"totalPassedCount":13},{"code":2147483647,"identifier":"REPORT","output":"TEST RESULTS\n\n* Checkstyle report *\n\nFound errors: 0\n\n\n\n\n* Compiler report *\n\nCompilation succeeded.\n\n* Unit tests *\n\n\nee.taltech.iti0202.sum100.Sum100Test (TestNG)\nTue Nov 26 06:00:44 UTC 2019\n ---\nSUCCESS: test8\n\t3 msecs, weight: 1 unit\nSUCCESS: test3\n\t8 msecs, weight: 1 unit\nSUCCESS: testTricky12\n\t5 msecs, weight: 1 unit\nSUCCESS: test11\n\t21 msecs, weight: 1 unit\nSUCCESS: test13\n\t1 msec, weight: 1 unit\nSUCCESS: test6\n\t3 msecs, weight: 1 unit\nSUCCESS: test5\n\t1 msec, weight: 1 unit\nSUCCESS: test4\n\t15 msecs, weight: 1 unit\nSUCCESS: test7\n\t3 msecs, weight: 1 unit\nSUCCESS: test1\n\t93 msecs, weight: 1 unit\nSUCCESS: test10\n\t25 msecs, weight: 1 unit\nSUCCESS: test9\n\t15 msecs, weight: 1 unit\nSUCCESS: test2\n\t2 msecs, weight: 1 unit\n\nPassed unit tests: 13/13\nFailed unit tests: 0\nSkipped unit tests: 0\nGrade: 100.0%\n\nOverall grade: 100.0%\n","result":"SUCCESS"}]}