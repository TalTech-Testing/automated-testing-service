{
  "type": "hodor_studenttester",
  "results": [
    {
      "count": 8,
      "code": 101,
      "errors": [
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 6,
          "columnNo": 19,
          "message": "E221 multiple spaces before operator",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 6,
          "columnNo": 27,
          "message": "E203 whitespace before ':'",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 6,
          "columnNo": 31,
          "message": "E203 whitespace before ':'",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 12,
          "columnNo": 40,
          "message": "E271 multiple spaces after keyword",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 1,
          "columnNo": 0,
          "message": "D100: Missing docstring in public module",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 4,
          "columnNo": 0,
          "message": "D103: Missing docstring in public function",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 9,
          "columnNo": 0,
          "message": "D103: Missing docstring in public function",
          "kind": "style error"
        },
        {
          "fileName": "/pytest_tmp/cipher.py",
          "lineNo": 15,
          "columnNo": 0,
          "message": "D103: Missing docstring in public function",
          "kind": "style error"
        }
      ],
      "identifier": "CHECKSTYLE",
      "result": "SUCCESS"
    },
    {
      "code": 102,
      "diagnosticList": [],
      "identifier": "COMPILER",
      "result": "SUCCESS"
    },
    {
      "code": 103,
      "files": [
        {
          "path": "cipher.py",
          "contents": "from itertools import cycle\n\n\ndef rail_pattern(n):\n    r = list(range(n))\n    return cycle(r  + r[-2 : 0 : - 1])\n\n\ndef encode(a, b):\n    p = rail_pattern(b)\n    # this relies on key being called in order, guaranteed?\n    return ''.join(sorted(a, key=lambda  i: next(p))).replace(\" \", \"_\")\n\n\ndef decode(a, b):\n    p = rail_pattern(b)\n    indexes = sorted(range(len(a)), key=lambda i: next(p))\n    result = [''] * len(a)\n    for i, c in zip(indexes, a):\n        result[i] = c\n    return ''.join(result).replace(\"_\", \"_\")\n\n\nprint(encode(\"Mind on vaja kr\u00fcpteerida\", 3))  # => M_v_prido_aak\u00fcteiannjred\nprint(encode(\"Mind on\", 3))  # => M_idonn\nprint(encode(\"hello\", 1))  # => hello\nprint(encode(\"hello\", 8))  # => hello\nprint(encode(\"kaks pead\", 1))  # => kaks_pead\n\nprint(decode(\"kaks_pead\", 1))  # => kaks pead\nprint(decode(\"M_idonn\", 3))  # => Mind on\nprint(decode(\"M_v_prido_aak\u00fcteiannjred\", 3))  # => Mind on vaja kr\u00fcpteerida\n",
          "isTest": false
        }
      ],
      "identifier": "FILEWRITER",
      "result": "SUCCESS"
    },
    {
      "code": 500,
      "identifier": "TESTNG",
      "result": "SUCCESS",
      "testContexts": [
        {
          "name": "/pytest_tmp/cipher_tests.py",
          "file": "/pytest_tmp/cipher_tests.py",
          "count": 23,
          "passedCount": 16,
          "unitTests": [
            {
              "name": "test_encode_empty_string",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 5
            },
            {
              "name": "test_encode_character",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_key_1",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_longer_sentence_key_1",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_sentence_key_2",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_sentence_key_3",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_key_bigger_than_length",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_sentence_letter_sensitive",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_sentence_hard",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_sentence_key_bigger_than_length",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_empty_string",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_character",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_key_1",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_longer_sentence_key_1",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 1
            },
            {
              "name": "test_decode_sentence_key_2",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 1
            },
            {
              "name": "test_decode_sentence_key_3",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_key_bigger_than_length",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_sentence_key_bigger_than_length",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_decode_sentence_letter_sensitive",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 0
            },
            {
              "name": "test_encode_long_text",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 1
            },
            {
              "name": "test_decode_long_text",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 4
            },
            {
              "name": "test_encode_random",
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "timeElapsed": 300
            },
            {
              "name": "test_decode_random",
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "timeElapsed": 5
            }
          ],
          "identifier": 1,
          "grade": 69.56521739130434
        }
      ],
      "totalGrade": 69.56521739130434,
      "totalCount": 23,
      "totalPassedCount": 16
    },
    {
      "code": 2147483647,
      "identifier": "REPORT",
      "output": "Style conventions checker results:\n\nPEP8 stylecheck:\ncipher.py:6:19: E221 multiple spaces before operator\ncipher.py:6:27: E203 whitespace before ':'\ncipher.py:6:31: E203 whitespace before ':'\ncipher.py:12:40: E271 multiple spaces after keyword\n2     E203 whitespace before ':'\n1     E221 multiple spaces before operator\n1     E271 multiple spaces after keyword\n\nPEP257 stylecheck:\ncipher.py:1 at module level:\n        D100: Missing docstring in public module\ncipher.py:4 in public function `rail_pattern`:\n        D103: Missing docstring in public function\ncipher.py:9 in public function `encode`:\n        D103: Missing docstring in public function\ncipher.py:15 in public function `decode`:\n        D103: Missing docstring in public function\nStyle percentage: 0%\n\n\nTest: cipher_tests.py\n\n   test_encode_empty_string: passed (5.924 ms)\n\n   test_encode_character: passed (0.9048 ms)\n\n   test_encode_key_1: passed (0.8497 ms)\n\n   test_encode_longer_sentence_key_1: passed (0.725 ms)\n\n   test_encode_sentence_key_2: passed (0.8202 ms)\n\n   test_encode_sentence_key_3: passed (0.7503 ms)\n\n   test_encode_key_bigger_than_length: passed (0.7575 ms)\n\n   test_encode_sentence_letter_sensitive: passed (0.7384 ms)\n\n   test_encode_sentence_hard: passed (0.7226 ms)\n\n   test_encode_sentence_key_bigger_than_length: passed (0.7706 ms)\n\n   test_decode_empty_string: passed (0.7117 ms)\n\n   test_decode_character: passed (0.7741 ms)\n\n   test_decode_key_1: passed (0.7234 ms)\n\n   test_decode_longer_sentence_key_1: FAILED (1.141 ms)\n\n   test_decode_sentence_key_2: FAILED (1.137 ms)\n\n   test_decode_sentence_key_3: FAILED (0.9422 ms)\n\n   test_decode_key_bigger_than_length: passed (0.7482 ms)\n\n   test_decode_sentence_key_bigger_than_length: FAILED (0.9429 ms)\n\n   test_decode_sentence_letter_sensitive: FAILED (0.927 ms)\n\n   test_encode_long_text: passed (1.237 ms)\n\n   test_decode_long_text: FAILED (4.664 ms)\n\n   test_encode_random: passed (300.5 ms)\n\n   test_decode_random: FAILED (5.618 ms)\n\n\nTotal number of tests: 23\nPassed tests: 16\nFailed tests: 7\n\nPercentage: 69.57%\n\n",
      "result": "SUCCESS"
    }
  ],
  "extra": "extra"
}