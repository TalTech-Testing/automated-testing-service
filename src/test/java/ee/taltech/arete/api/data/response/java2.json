{
  "version": "2.0, build 20191126_122604",
  "type": "hodor_studenttester",
  "contentRoot": "/student",
  "testRoot": "/tester",
  "results": [
    {
      "code": 101,
      "count": 2,
      "errors": [
        {
          "fileName": "src/ee/taltech/iti0202/idcode/IDCode.java",
          "severityLevel": "ERROR",
          "lineNo": 5,
          "columnNo": 1,
          "message": "File contains tab characters (this is the first instance)."
        },
        {
          "fileName": "src/ee/taltech/iti0202/idcode/IDCode.java",
          "severityLevel": "ERROR",
          "lineNo": 103,
          "columnNo": 0,
          "message": "Line is longer than 120 characters (found 127)."
        }
      ],
      "identifier": "CHECKSTYLE",
      "result": "SUCCESS"
    },
    {
      "code": 103,
      "files": [
        {
          "path": ".gitkeep",
          "contents": "<file in binary format or unable to read file>",
          "isTest": true
        },
        {
          "path": "checkstyle.xml",
          "contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n<!--\n\n  Checkstyle configuration that checks the sun coding conventions from:\n\n    - the Java Language Specification at\n      http://java.sun.com/docs/books/jls/second_edition/html/index.html\n\n    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/\n\n    - the Javadoc guidelines at\n      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html\n\n    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html\n\n    - some best practices\n\n  Checkstyle is very configurable. Be sure to read the documentation at\n  http://checkstyle.sf.net (or in your downloaded distribution).\n\n  Most Checks are configurable, be sure to consult the documentation.\n\n  To completely disable a check, just comment it out or delete it from the file.\n\n  Finally, it is worth reading the documentation.\n\n-->\n<module name=\"Checker\">\n    <property name=\"charset\" value=\"UTF-8\"/>\n    <!--\n        If you set the basedir property below, then all reported file\n        names will be relative to the specified directory. See\n        http://checkstyle.sourceforge.net/5.x/config.html#Checker\n\n        <property name=\"basedir\" value=\"${basedir}\"/>\n    -->\n\n    <!-- Checks that a package-info.java file exists for each package.     -->\n    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->\n    <!--\n    <module name=\"JavadocPackage\"/>\n    -->\n\n    <!-- Checks whether files end with a new line.                        -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->\n    <module name=\"NewlineAtEndOfFile\">\n        <property name=\"fileExtensions\" value=\"java, xml, py, css, fxml\"/>\n    </module>\n\n    <!-- Checks that property files contain the same keys.         -->\n    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->\n    <module name=\"Translation\"/>\n\n    <!-- Checks for Size Violations.                    -->\n    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n    <module name=\"FileLength\"/>\n\n    <!-- Checks for whitespace                               -->\n    <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n    <module name=\"FileTabCharacter\"/>\n\n    <!-- Miscellaneous other checks.                   -->\n    <!-- See http://checkstyle.sf.net/config_misc.html -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"\\s+$\"/>\n        <property name=\"minimum\" value=\"0\"/>\n        <property name=\"maximum\" value=\"0\"/>\n        <property name=\"message\" value=\"Line has trailing spaces.\"/>\n    </module>\n\n    <module name=\"TreeWalker\">\n\n        <!-- Checks for Javadoc comments.                     -->\n        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n\n\n        <!-- Checks for Naming Conventions.                  -->\n        <!-- See http://checkstyle.sf.net/config_naming.html -->\n        <module name=\"ConstantName\"/>\n        <!--\n            <module name=\"LocalFinalVariableName\"/>\n        -->\n        <module name=\"LocalVariableName\"/>\n        <module name=\"MemberName\"/>\n        <module name=\"MethodName\"/>\n        <module name=\"PackageName\"/>\n        <module name=\"ParameterName\"/>\n        <module name=\"StaticVariableName\"/>\n        <module name=\"TypeName\"/>\n\n\n        <!-- Checks for Headers                                -->\n        <!-- See http://checkstyle.sf.net/config_header.html   -->\n        <!-- <module name=\"Header\">                            -->\n        <!-- The follow property value demonstrates the ability     -->\n        <!-- to have access to ANT properties. In this case it uses -->\n        <!-- the ${basedir} property to allow Checkstyle to be run  -->\n        <!-- from any directory within a project. See property      -->\n        <!-- expansion,                                             -->\n        <!-- http://checkstyle.sf.net/config.html#properties        -->\n        <!-- <property                                              -->\n        <!--     name=\"headerFile\"                                  -->\n        <!--     value=\"${basedir}/java.header\"/>                   -->\n        <!-- </module> -->\n\n        <!-- Following interprets the header file as regular expressions. -->\n        <!-- <module name=\"RegexpHeader\"/>                                -->\n\n\n        <!-- Checks for imports                              -->\n        <!-- See http://checkstyle.sf.net/config_import.html -->\n        <module name=\"AvoidStarImport\"/>\n        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n        <module name=\"RedundantImport\"/>\n        <module name=\"UnusedImports\"/>\n\n\n        <!-- Checks for Size Violations.                    -->\n        <!-- See http://checkstyle.sf.net/config_sizes.html -->\n        <module name=\"LineLength\">\n            <property name=\"max\" value=\"120\"/>\n        </module>\n        <module name=\"MethodLength\"/>\n        <module name=\"ParameterNumber\"/>\n\n\n        <!-- Checks for whitespace                               -->\n        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n        <module name=\"EmptyForIteratorPad\"/>\n        <module name=\"GenericWhitespace\"/>\n        <module name=\"MethodParamPad\"/>\n        <module name=\"NoWhitespaceAfter\"/>\n        <module name=\"NoWhitespaceBefore\"/>\n        <module name=\"OperatorWrap\"/>\n        <module name=\"ParenPad\"/>\n        <module name=\"TypecastParenPad\"/>\n        <module name=\"WhitespaceAfter\"/>\n        <module name=\"WhitespaceAround\"/>\n\n\n        <!-- Modifier Checks                                    -->\n        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n        <module name=\"ModifierOrder\"/>\n        <module name=\"RedundantModifier\"/>\n\n\n        <!-- Checks for blocks. You know, those {}'s         -->\n        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n        <module name=\"AvoidNestedBlocks\"/>\n        <module name=\"EmptyBlock\"/>\n        <module name=\"LeftCurly\"/>\n        <module name=\"NeedBraces\">\n            <property name=\"allowSingleLineStatement\" value=\"true\"/>\n        </module>\n        <module name=\"RightCurly\"/>\n\n\n        <!-- Checks for common coding problems               -->\n        <!-- See http://checkstyle.sf.net/config_coding.html -->\n        <!-- module name=\"AvoidInlineConditionals\"/ -->\n        <module name=\"EmptyStatement\"/>\n        <module name=\"EqualsHashCode\"/>\n        <!--\n            <module name=\"HiddenField\">\n                <property name=\"ignoreSetter\" value=\"true\"/>\n        </module>\n        -->\n        <module name=\"IllegalInstantiation\"/>\n        <module name=\"InnerAssignment\"/>\n        <module name=\"MagicNumber\">\n            <property name=\"ignoreNumbers\" value=\"-5,-4,-3,-2,-1,0,1,2,3,4,5,10,100,1000\"/>\n        </module>\n        <module name=\"MissingSwitchDefault\"/>\n        <module name=\"SimplifyBooleanExpression\"/>\n        <module name=\"SimplifyBooleanReturn\"/>\n\n        <!-- Checks for class design                         -->\n        <!-- See http://checkstyle.sf.net/config_design.html -->\n        <!--\n            <module name=\"DesignForExtension\"/>\n        -->\n        <module name=\"FinalClass\"/>\n        <!--\n            <module name=\"HideUtilityClassConstructor\"/>\n        -->\n        <module name=\"InterfaceIsType\"/>\n        <!--\n            <module name=\"VisibilityModifier\"/>\n        -->\n\n\n        <!-- Miscellaneous other checks.                   -->\n        <!-- See http://checkstyle.sf.net/config_misc.html -->\n        <module name=\"ArrayTypeStyle\"/>\n        <!--\n            <module name=\"FinalParameters\"/>\n        -->\n        <module name=\"TodoComment\"/>\n        <module name=\"UpperEll\"/>\n\n    </module>\n\n\n</module>",
          "isTest": true
        },
        {
          "path": "idcode.rst",
          "contents": "EX01 Checking personal ID code validity\n=======================================\n\nKaust Gitis: ``EX01IdCode``\n\nPakk Gitis: ``ee.taltech.iti0202.idcode``\n\nÜlesande eesmärk on koostada programm, mis kontrollib isikukoodi korrektsust.\n\nIsikukoodi numbrid, nende tähendused ja piirangud\n-------------------------------------------------\n\nIsikukood koosneb täpselt **11** numbrist.\n\nNumbrite tähendused:\n\n**esimene** number:\n\n- **1** - aastail 1800-1899 sündinud mees\n- **2** - aastail 1800-1899 sündinud naine\n- **3** - aastail 1900-1999 sündinud mees\n- **4** - aastail 1900-1999 sündinud naine\n- **5** - aastail 2000-2099 sündinud mees\n- **6** - aastail 2000-2099 sündinud naine\n\n**teine** ja **kolmas** number:\n\n- sünniaasta **2** viimast numbrit *(nt 00, 01, 75 jne kuni 99)*\n\n**neljas** ja **viies** number:\n\n- sünnikuu number *(nt jaanuar - 01, veebruar - 02 jne, kuni 12)*\n\n**kuues** ja **seitsmes** number:\n\n- sünnikuupäeva number *(nt 01, 08, 20 jne kuni 28, 29, 30 või 31 vastavalt\n  sünnikuule)*\n\n**kaheksas**, **üheksas** ja **kümnes** number:\n\n- sellel päeval sündinu järjekorranumber *(nt 001, 012 jne kuni 999)*\n\n**üheteistkümnes** number:\n\n- kontrollnumber, mis arvutatakse teiste numbrite pealt, vaata `Kontrollnumbri arvutamise algoritm`_\n\n\nÜlesanne\n--------\n\nProgramm koosneb mitmest funktsioonist (meetodist), mis kontrollivad isikukoodi\nerinevaid komponente.\n\nKaks põhimeetodit (``isIDCodeCorrect`` ja ``getInformationFromIDCode``) on ``public`` nähtavusega,\nülejäänud on ``private``. Juba alguses on soovituslik hakata õppima, milles seisnevad\nmuutujate, meetodite jne tüüpide erinevused, eeldused ja puudused ning mis olukorras\nmilline sobiks paremini. Praeguses ülesandes on näha, et kõik \"üksikud\" kontrollid on ``private`` nähtavusega.\nSelle põhjuseks on see, et neid kontrolle teostab program nö \"taustal\". Kasutaja soovib teada ainult\noma isikukoodi korrektsust ja saada infot selle inimese kohta. Ülejäänud tegevused, tänu millele\nsaadaksegi õige tulemus, teda ei huvita (ehk siis tal ei ole põhjust ega vajadust neid otse välja kutsuda).\nSellisel juhul tavaliselt piiratakse liigipääs nendele\nmeetoditele - teeme neid privaatseteks.\n\nSoo valik on kujutatud ``enum``-andmetüübina, sest soo võimalikke väärtusi on piiratud hulk (selles ülesandes 2). Rohkem\nenum-ist saab lugeda `siit <https://ained.ttu.ee/javadoc/oop_enum.html>`_\n\n* ``public static boolean isIDCodeCorrect(String idCode)`` - peamine funktsioon, mis kontrollib isikukoodi korrektsust.\n  Kasutab teisi ehk\n  kontroll-funktsioone, tagastab ``true`` või ``false``. Sisendiks on isikukood sõne kujul;\n* ``private static boolean isGenderNumberCorrect(String idCode)`` - kontrollib soo numbrit, tagastab\n  ``true`` või ``false``;\n* ``private static boolean isYearNumberCorrect(String idCode)`` - kontrollib aasta numbreid,\n  tagastab ``true`` või ``false``;\n* ``private static boolean isMonthNumberCorrect(String idCode)`` - kontrollib kuu numbreid, tagastab\n  ``true`` või ``false``;\n* ``private static boolean isDayNumberCorrect(String idCode)`` - kontrollib kuupäeva numbreid; peab kindlasti vaatama seda,\n  millises kuus on 30 või 31 päeva ja arvestama ka veebruari päevade arvu erisusega, tagastab ``true``\n  või ``false``;\n  **NB! Kontrollides, kas kuus on 30 või 31 päeva, ei tohi lihtsalt\n  kirja panna kõik sobivad kuud tingimuslausete sisse, proovige leida kuu numbri\n  ja päevade arvu seos.**\n  **NB! Enne liigasta kontrollimist tuleb koostada isikukoodis antud aasta\n  kahest viimastest numbrist aasta terve neljakohaline arv. Selleks võib\n  kasutada funktsioone, mis on mõeldud sõnumi koostamiseks!**\n* ``private static boolean isLeapYear(int fullYear)`` - abifunktsioon, mis aitab aru saada, kas\n  tegemist on liigaastaga või mitte. Selle funktsiooni sisendiks on juba\n  **neljakohaline** aastaarv. Tagastab ``true`` või ``false``;\n* ``private static boolean isQueueNumberCorrect(String idCode)`` - kontrollib sündinu järjenumbrit, tagastab\n  ``true`` või ``false``;\n* ``private static boolean isControlNumberCorrect(String idCode)`` - kontrollib kontrollnumbri\n  korrektsust, aga kasutades algoritmi, millega luuakse need numbrid\n  (`Kontrollnumbri arvutamise algoritm`_), tagastab ``true`` või ``false``;\n* ``public static String getInformationFromIDCode(String idCode)`` - peamine funktsioon, mis kogub infot\n  abifunktsioonidest, tagastab sõne **This is a (sugu) born on\n  (sünnikuupäev kujul DD.MM.YYYY)**;\n* ``public static Gender getGender(String idCode)`` - tuvastab isikukoodi esimese numbri põhjal, milline sugu on inimesel.\n  tagastab vastava enum väärtuse;\n* ``public static int getFullYear(String idCode)`` - tagastab isikukoodi aasta ja soo numbrite\n  abil 4-kohalise aastanumbri - **18--**, **19--** või **20--**;\n\n\nMall\n####\n\n.. code-block:: java\n\n    public class IDCode {\n    \n        private enum Gender {\n            MALE, FEMALE\n        }\n\n        public static boolean isIDCodeCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isGenderNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isYearNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isMonthNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isDayNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isQueueNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isControlNumberCorrect(String idCode) {\n            return false;\n        }\n\n        private static boolean isLeapYear(int fullYear) {\n            return false;\n        }\n\n        public static String getInformationFromIDCode(String idCode) {\n            return \"\";\n        }\n\n        public static Gender getGender(String idCode) {\n            return null;\n        }\n\n        public static int getFullYear(String idCode) {\n            return 0;\n        }\n    }\n\n\nKontrollnumbri arvutamise algoritm\n----------------------------------\n\nLiidetakse kokku esimese kümne numbri **1, 2, 3, 4, 5, 6, 7, 8, 9** korrutised\nigale arvule vastava järjekorranumbriga *(nt 1×4 + 2×9 + 3×8 jne kuni kümnes\nnumber × jälle 1)* ning leitakse saadud summast **jääk** jagamisel **11-ga**.\nSee jääk ongi kontrollnumber.\n\nJuhul, kui jääk on võrdne 10-ga, tehakse arvutus uuesti ning võetakse\nteguriteks, millega isikukoodi numbreid korrutada, vastavalt\n**3, 4, 5, 6, 7, 8, 9, 1, 2, 3**. Leitakse jääk\njagamisel 11-ga. Ja see ongi kontrollnumber.\n\nKui jääk jälle võrdub 10ga, siis määratakse kontrollnumbriks **0**.\n\nNäide:\nisikukoodi 49808270244 kontrollnumber peab olema 4.\n1) Summa 1×4 + 2×9 + 3×8 + 4×0 + 5×8 + 6×2 + 7×7 + 8×0 + 9×2 + 1×4 = 169\n2) 169 ÷ 11 = 15, jääk 4\n\nSeega on kaks komplekti kordajaid, mida kontrollnumbri leidmisel tuleb kasutada:\n\n- kordajad_1 = (1,2,3,4,5,6,7,8,9,1)\n- kordajad_2 = (3,4,5,6,7,8,9,1,2,3)\n\n\nVihjed ja soovitused\n--------------------\n**1. Kuupäevade arv igas kuus:**\n\n- Jaanuar 31\n- Veebruar 28/29\n- Märts 31\n- Aprill 30\n- Mai 31\n- Juuni 30\n- Juuli 31\n- August 31\n- September 30\n- Oktoober 31\n- November 30\n- Detsember 31\n\n**2. Liigaasta** ja selle leidmine\n\nAasta on liigaasta, kui aastaarv jagub 4-ga, välja arvatud juhul, kui ta jagub\n100-ga, ent mitte 400-ga.\nNatukene täpsem seletus:\n\n1. Kõik aastad, kus aastaarv jagub **400-ga**, **on** kindlasti **liigaastad**\n2. Kõik aastad, kus aastaarv jagub **100-ga**, **ei ole** liigaastad\n3. Kõik aastad, kus aastaarv jagub **4-ga**, **on** ka **liigaastad**\n\nLiigaastad **on**: 4, 40, 2016, 2000, 1600\n\nLiigaastad **pole**: 3, 41, 2018, 1900, 1800\n\n",
          "isTest": true
        },
        {
          "path": "src/ee/taltech/iti0202/idcode/.gitkeep",
          "contents": "<file in binary format or unable to read file>",
          "isTest": true
        },
        {
          "path": "src/ee/taltech/iti0202/idcode/IDCodeTest.java",
          "contents": "package ee.taltech.iti0202.idcode;\n\nimport ee.ttu.java.studenttester.annotations.Gradable;\nimport ee.ttu.java.studenttester.annotations.TestContextConfiguration;\nimport ee.ttu.java.studenttester.enums.ReportMode;\nimport org.testng.annotations.*;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport static org.testng.Assert.*;\n\n\n@TestContextConfiguration(mode= ReportMode.VERBOSE)\npublic class IDCodeTest {\n\n    private enum Gender {\n        MALE, FEMALE\n    }\n\n    /*\n    Test on different parts of id code separately (testing private methods aka control methods)\n     */\n\n    private boolean callBackgroundControlMethodOnIDCode(String controlMethodName, String idCode) throws Exception {\n        Method method = IDCode.class.getDeclaredMethod(controlMethodName, String.class);\n        method.setAccessible(true);\n        try {\n            return (boolean) method.invoke(new IDCode(), idCode);\n        } catch (InvocationTargetException e) {\n            try {\n                throw e.getCause();\n            } catch (Throwable throwable) {\n                throw new Exception(throwable);\n            }\n        }\n\n\n    }\n\n    private boolean callIsLeapYear(int year) throws Exception {\n        Method method = IDCode.class.getDeclaredMethod(\"isLeapYear\", int.class);\n        method.setAccessible(true);\n        return (boolean) method.invoke(new IDCode(), year);\n\n    }\n\n    /*\n    Test on different parts of id code separately (testing private methods aka control methods)\n     */\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeIsGenderNumberCorrectWrong() throws Exception {\n        assertTrue(callBackgroundControlMethodOnIDCode(\"isGenderNumberCorrect\", \"49808270244\"));\n        boolean isGenderCorrect = callBackgroundControlMethodOnIDCode(\"isGenderNumberCorrect\", \"89913320021\");\n        assertFalse(isGenderCorrect, \"Gender number cannot be bigger than 6!\");\n\n        boolean isGenderCorrect2 = callBackgroundControlMethodOnIDCode(\"isGenderNumberCorrect\", \"04706281232\");\n        assertFalse(isGenderCorrect2, \"Gender number cannot be lower than 1!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeIsMonthNumberCorrectOutOfRange() throws Exception {\n        assertTrue(callBackgroundControlMethodOnIDCode(\"isMonthNumberCorrect\", \"49808270244\"));\n        boolean isMonthCorrect = callBackgroundControlMethodOnIDCode(\"isMonthNumberCorrect\", \"89913320021\");\n        assertFalse(isMonthCorrect, \"Month number cannot be bigger than 12!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeIsDayNumberCorrectWrong() throws Exception {\n        assertTrue(callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"49808270244\"));\n        boolean isDayCorrect = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"89913320021\");\n        assertFalse(isDayCorrect, \"Day number cannot be bigger than 31!\");\n\n        boolean isDayCorrect2 = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"49811310287\");\n        assertFalse(isDayCorrect2, \"This month has max 30 days, 31 is impossible!\");\n\n\n    }\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeIsControlNumberCorrectWrong() throws Exception {\n        assertTrue(callBackgroundControlMethodOnIDCode(\"isControlNumberCorrect\", \"49808270244\"));\n        boolean isControlCorrect = callBackgroundControlMethodOnIDCode(\"isControlNumberCorrect\", \"89913320021\");\n        assertFalse(isControlCorrect, \"Control number in given ID code must be wrong!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeGenderMustBeEnumDataType() {\n        assertEquals(String.valueOf(IDCode.getGender(\"49808270244\")), String.valueOf(Gender.FEMALE));\n    }\n\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeGenders() {\n        assertEquals(String.valueOf(IDCode.getGender(\"49808270244\")), String.valueOf(Gender.FEMALE));\n        assertEquals(String.valueOf(IDCode.getGender(\"51809170123\")), String.valueOf(Gender.MALE));\n    }\n    \n\n    @Test(timeOut = 1000)\n    public void testIsLeapYear() throws Exception {\n        assertFalse(callIsLeapYear(1900));\n        assertFalse(callIsLeapYear(1800));\n        assertFalse(callIsLeapYear(1700));\n        assertFalse(callIsLeapYear(1601));\n        assertFalse(callIsLeapYear(1602));\n        assertFalse(callIsLeapYear(1603));\n        assertTrue(callIsLeapYear(2000));\n        assertTrue(callIsLeapYear(1904));\n        assertTrue(callIsLeapYear(1704));\n        assertTrue(callIsLeapYear(1600));\n    }\n    \n    \n    @Test(timeOut = 1000)\n    public void testGetFullYear() {\n        assertEquals(IDCode.getFullYear(\"49808270244\"), 1998);\n        assertEquals(IDCode.getFullYear(\"35906220350\"), 1959);\n        assertEquals(IDCode.getFullYear(\"15602291230\"), 1856);\n        assertEquals(IDCode.getFullYear(\"23504300020\"), 1835);\n        assertEquals(IDCode.getFullYear(\"50503251422\"), 2005);\n    }\n    \n    // added tests below\n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCodeFebruaryOnLeapYear() throws Exception {\n        //given a leap year 1856 and February the 30th, which is wrong\n        boolean isDayCorrect = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"15602301239\");\n        assertFalse(isDayCorrect, \"February day number cannot be bigger than 29 even on leap year!\");\n        \n        //given a leap year 1856 and February the 29th\n        boolean isDayCorrect2 = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"15602291230\");\n        assertTrue(isDayCorrect2, \"Id code must be correct!\");\n    }\n    \n    @Test(timeOut = 1000, groups = \"single check\")\n    public void testIdCode31DaysWhenMonthHasMax30() throws Exception {\n        //given year 1835 and April the 31st, but April has max 30 days\n        boolean isDayCorrect = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"23504310020\");\n        assertFalse(isDayCorrect, \"Day number in given month cannot be bigger than 30!\");\n        \n        //given year 1835 and April the 30th - this is possible\n        boolean isDayCorrect2 = callBackgroundControlMethodOnIDCode(\"isDayNumberCorrect\", \"23504300020\");\n        assertTrue(isDayCorrect2, \"Id code must be correct!\");\n    }\n\n\n\n    /*\n    Test on overall ID code validity through some incorrect parts of id code\n     */\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeContainsLetters() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"123heyID8\"), \"ID code shouldn't contain letters!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeIsLongerThanAllowed() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"589644755127852\"), \"ID code length shouldn't exceed 11 characters!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeIsShorterThanAllowed() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"49808\"), \"ID code length shouldn't be less than 11 characters!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeGenderNumberIsOutOfRange() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"95502114851\"), \"Gender number is out of allowed range!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeIsJustRandomNumbers() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"12345678901\"), \"Your code accepts totally wrong ID code!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeChosenControlNumberIsWrong() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"60109200187\"), \"Given ID code contains incorrectly computed control number!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeFebruaryCannotHave30Days() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"49802300248\"), \"February cannot have 30 days!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeLongerFebruaryNotLeapYear() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"49802290246\"), \"February has 29 days on leap year only!\");\n    }\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeQueueNumberCannotBeZero() {\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertFalse(IDCode.isIDCodeCorrect(\"39802280008\"), \"Queue number cannot be zero!\");\n    }\n\n\n    @Test(timeOut = 1000, groups = \"code validity\")\n    public void testIdCodeIsCorrect() {\n        assertFalse(IDCode.isIDCodeCorrect(\"a\"));\n        assertTrue(IDCode.isIDCodeCorrect(\"49808270244\"));\n        assertTrue(IDCode.isIDCodeCorrect(\"48802290150\"));\n        assertTrue(IDCode.isIDCodeCorrect(\"51809170123\"));\n    }\n\n    // TODO: add tests with 28, 29, 30 days in feb, 30, 31, 32 days in other months\n\n    /*\n    Test on getting information from ID code (run only if first part succeeds)\n     */\n    @Test(timeOut = 1000, dependsOnGroups = {\"code validity\", \"single check\"})\n    public void testGetInformationFromIDCodeMaleMustBeOK() {\n        assertEquals(IDCode.getInformationFromIDCode(\"51809170123\"), \"This is a male born on 17.09.2018\");\n    }\n\n    @Test(timeOut = 1000, dependsOnGroups = {\"code validity\", \"single check\"})\n    public void testGetInformationFromIDCodeFemaleMustBeOK() {\n        assertEquals(IDCode.getInformationFromIDCode(\"48802290150\"), \"This is a female born on 29.02.1988\");\n    }\n\n    @Test(timeOut = 1000, dependsOnGroups = {\"code validity\", \"single check\"})\n    public void testGetInformationFromIDCodeGivenInvalidCode() {\n        assertEquals(IDCode.getInformationFromIDCode(\"49808270242\"), \"Given invalid ID code!\");\n    }\n}\n",
          "isTest": true
        },
        {
          "path": "src/ee/taltech/iti0202/idcode/IDCode.java",
          "contents": "package ee.taltech.iti0202.idcode;\n\npublic class IDCode {\n\n\tpublic static final int ZERO = 0;\n\tprivate static final int YEAR_LOCATION = 3;\n\tprivate static final int MONTH_LOCATION = 5;\n\tprivate static final int DAY_LOCATION = 7;\n\tprivate static final int ID_CODE_LENGTH = 11;\n\tprivate static final int MONTHS_IN_A_YEAR = 12;\n\tprivate static final int LEAP_FEB = 29;\n\tprivate static final int NO_LEAP_FEB = 33;\n\tprivate static final int DAYS_IN_JAN = 33;\n\tprivate static final int DAYS_IN_APRIL = 30;\n\tprivate static final int[] MULTIPLIERS1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1};\n\tprivate static final int[] MULTIPLIERS2 = {3, 4, 5, 6, 7, 8, 9, 1, 2, 3};\n\tprivate static final int LEAP_MAX = 400;\n\tprivate static final int YEAR_MAX = 99;\n\tprivate static final int QUEUE_MAX = 999;\n\tprivate static final int EPOCH_YEAR = 1700;\n\n\tpublic static boolean isIDCodeCorrect(String idCode) {\n\n\t\treturn idCode.length() == ID_CODE_LENGTH && idCode.matches(\"[0-9]+\")\n\t\t\t\t&& isGenderNumberCorrect(idCode) && isYearNumberCorrect(idCode)\n\t\t\t\t&& isMonthNumberCorrect(idCode) && isDayNumberCorrect(idCode)\n\t\t\t\t&& isQueueNumberCorrect(idCode) && isControlNumberCorrect(idCode);\n\n\t}\n\n\tprivate static boolean isGenderNumberCorrect(String idCode) {\n\t\treturn idCode.substring(0, 1).matches(\"^[1-6]$\");\n\t}\n\n\tprivate static boolean isYearNumberCorrect(String idCode) {\n\t\tint year = Integer.parseInt(idCode.substring(YEAR_LOCATION - 2, YEAR_LOCATION));\n\t\treturn year >= 0 && year <= YEAR_MAX;\n\t}\n\n\tprivate static boolean isMonthNumberCorrect(String idCode) {\n\t\tint month = Integer.parseInt(idCode.substring(YEAR_LOCATION, MONTH_LOCATION));\n\t\treturn month > 0 && month <= MONTHS_IN_A_YEAR;\n\t}\n\n\tprivate static boolean isDayNumberCorrect(String idCode) {\n\t\tint year = getFullYear(idCode);\n\t\tboolean leap = isLeapYear(year);\n\t\tString month = idCode.substring(YEAR_LOCATION, MONTH_LOCATION);\n\t\tint day = Integer.parseInt(idCode.substring(MONTH_LOCATION, DAY_LOCATION));\n\t\tif (Integer.parseInt(month) == 2) {\n\t\t\tif (leap) {\n\t\t\t\treturn day > 0 && day <= LEAP_FEB;\n\t\t\t} else {\n\t\t\t\treturn day > ZERO && day <= NO_LEAP_FEB;\n\t\t\t}\n\t\t} else if (month.equals(\"04\") || month.equals(\"06\") || month.equals(\"09\") || month.equals(\"11\")) {\n\t\t\treturn day > 0 && day <= DAYS_IN_APRIL;\n\t\t} else {\n\t\t\treturn day > 0 && day <= DAYS_IN_JAN;\n\t\t}\n\n\t}\n\n\tprivate static boolean isQueueNumberCorrect(String idCode) {\n\t\tint queue = Integer.parseInt(idCode.substring(DAY_LOCATION, 10));\n\t\treturn queue > 0 && queue <= QUEUE_MAX;\n\t}\n\n\tprivate static boolean isControlNumberCorrect(String idCode) {\n\t\tint controlNumber = 0;\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tcontrolNumber += MULTIPLIERS1[i] * Character.getNumericValue(idCode.charAt(i));\n\t\t}\n\t\tcontrolNumber %= ID_CODE_LENGTH;\n\t\tif (controlNumber == 10) {\n\t\t\tcontrolNumber = 0;\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tcontrolNumber += MULTIPLIERS2[i] * Character.getNumericValue(idCode.charAt(i));\n\t\t\t}\n\t\t\tcontrolNumber %= ID_CODE_LENGTH;\n\t\t\tif (controlNumber == 10) {\n\t\t\t\tcontrolNumber = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn controlNumber == Integer.parseInt(idCode.substring(10));\n\t}\n\n\tprivate static boolean isLeapYear(int fullYear) {\n\t\tif (fullYear % LEAP_MAX == 0) {\n\t\t\treturn true;\n\t\t} else if (fullYear % 100 == 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn fullYear % 4 == 0;\n\t}\n\n\tpublic static String getInformationFromIDCode(String idCode) {\n\t\tif (!isIDCodeCorrect(idCode)) {\n\t\t\treturn \"Given invalid ID code!\";\n\t\t}\n\t\treturn \"This is a \" + getGender(idCode).toString().toLowerCase() + \" born on \"\n\t\t\t\t+ idCode.substring(5, DAY_LOCATION) + \".\" + idCode.substring(3, 5) + \".\" + getFullYear(idCode);\n\t}\n\n\tpublic static Gender getGender(String idCode) {\n\t\tString genderNumber = idCode.substring(0, 1);\n\t\tif (genderNumber.matches(\"^[1|3|5]$\")) {\n\t\t\treturn Gender.MALE;\n\t\t}\n\t\treturn Gender.FEMALE;\n\t}\n\n\tpublic static int getFullYear(String idCode) {\n\t\treturn Integer.parseInt(idCode.substring(1, 3)) + EPOCH_YEAR\n\t\t\t\t+ ((Integer.parseInt(idCode.substring(0, 1)) + 1) / 2) * 100;\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t}\n\n\tprivate enum Gender {\n\t\tMALE, FEMALE\n\t}\n}\n",
          "isTest": false
        }
      ],
      "identifier": "FILEWRITER",
      "result": "SUCCESS"
    },
    {
      "code": 102,
      "diagnosticList": [],
      "identifier": "COMPILER",
      "result": "SUCCESS"
    },
    {
      "code": 500,
      "identifier": "TESTNG",
      "result": "SUCCESS",
      "securityViolation": false,
      "testContexts": [
        {
          "unitTests": [
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsCorrect",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 2,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeChosenControlNumberIsWrong",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "SKIPPED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 0,
              "groupsDependedUpon": [
                "single check",
                "code validity"
              ],
              "methodsDependedUpon": [],
              "name": "testGetInformationFromIDCodeGivenInvalidCode",
              "stackTrace": "java.lang.Throwable: Method IDCodeTest.testGetInformationFromIDCodeGivenInvalidCode()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648)\n\tat org.testng.TestRunner.run(TestRunner.java:505)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137)\n\tat org.testng.TestNG.runSuites(TestNG.java:1049)\n\tat org.testng.TestNG.run(TestNG.java:1017)\n\tat ee.ttu.java.studenttester.core.runners.TestNGRunner.run(TestNGRunner.java:158)\n\tat ee.ttu.java.studenttester.core.StudentTester.run(StudentTester.java:41)\n\tat ee.ttu.java.studenttester.core.StudentTester.main(StudentTester.java:72)\n",
              "exceptionClass": "java.lang.Throwable",
              "exceptionMessage": "Method IDCodeTest.testGetInformationFromIDCodeGivenInvalidCode()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"",
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsJustRandomNumbers",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsLongerThanAllowed",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "SKIPPED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 0,
              "groupsDependedUpon": [
                "single check",
                "code validity"
              ],
              "methodsDependedUpon": [],
              "name": "testGetInformationFromIDCodeFemaleMustBeOK",
              "stackTrace": "java.lang.Throwable: Method IDCodeTest.testGetInformationFromIDCodeFemaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648)\n\tat org.testng.TestRunner.run(TestRunner.java:505)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137)\n\tat org.testng.TestNG.runSuites(TestNG.java:1049)\n\tat org.testng.TestNG.run(TestNG.java:1017)\n\tat ee.ttu.java.studenttester.core.runners.TestNGRunner.run(TestNGRunner.java:158)\n\tat ee.ttu.java.studenttester.core.StudentTester.run(StudentTester.java:41)\n\tat ee.ttu.java.studenttester.core.StudentTester.main(StudentTester.java:72)\n",
              "exceptionClass": "java.lang.Throwable",
              "exceptionMessage": "Method IDCodeTest.testGetInformationFromIDCodeFemaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"",
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 2,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCode31DaysWhenMonthHasMax30",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsDayNumberCorrectWrong",
              "stackTrace": "java.lang.AssertionError: Day number cannot be bigger than 31! expected [false] but found [true]\n\tat org.testng.Assert.fail(Assert.java:96)\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\n\tat org.testng.Assert.assertFalse(Assert.java:65)\n\tat ee.taltech.iti0202.idcode.IDCodeTest.testIdCodeIsDayNumberCorrectWrong(IDCodeTest.java:72)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)\n\tat org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)\n\tat org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",
              "exceptionClass": "java.lang.AssertionError",
              "exceptionMessage": "Day number cannot be bigger than 31! expected [false] but found [true]",
              "stdout": [],
              "stderr": []
            },
            {
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 3,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeFebruaryCannotHave30Days",
              "stackTrace": "java.lang.AssertionError: February cannot have 30 days! expected [false] but found [true]\n\tat org.testng.Assert.fail(Assert.java:96)\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\n\tat org.testng.Assert.assertFalse(Assert.java:65)\n\tat ee.taltech.iti0202.idcode.IDCodeTest.testIdCodeFebruaryCannotHave30Days(IDCodeTest.java:191)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)\n\tat org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)\n\tat org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",
              "exceptionClass": "java.lang.AssertionError",
              "exceptionMessage": "February cannot have 30 days! expected [false] but found [true]",
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeGenderMustBeEnumDataType",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "FAILED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 2,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeLongerFebruaryNotLeapYear",
              "stackTrace": "java.lang.AssertionError: February has 29 days on leap year only! expected [false] but found [true]\n\tat org.testng.Assert.fail(Assert.java:96)\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\n\tat org.testng.Assert.assertFalse(Assert.java:65)\n\tat ee.taltech.iti0202.idcode.IDCodeTest.testIdCodeLongerFebruaryNotLeapYear(IDCodeTest.java:197)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)\n\tat org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)\n\tat org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",
              "exceptionClass": "java.lang.AssertionError",
              "exceptionMessage": "February has 29 days on leap year only! expected [false] but found [true]",
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIsLeapYear",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 2,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsShorterThanAllowed",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 0,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeQueueNumberCannotBeZero",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsGenderNumberCorrectWrong",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeGenderNumberIsOutOfRange",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsControlNumberCorrectWrong",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 68,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testGetFullYear",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 6,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeGenders",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeContainsLetters",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeFebruaryOnLeapYear",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "PASSED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": false,
              "printStackTrace": false,
              "timeElapsed": 1,
              "groupsDependedUpon": [],
              "methodsDependedUpon": [],
              "name": "testIdCodeIsMonthNumberCorrectOutOfRange",
              "stackTrace": null,
              "exceptionClass": null,
              "exceptionMessage": null,
              "stdout": [],
              "stderr": []
            },
            {
              "status": "SKIPPED",
              "weight": 1,
              "description": "",
              "printExceptionMessage": true,
              "printStackTrace": true,
              "timeElapsed": 0,
              "groupsDependedUpon": [
                "single check",
                "code validity"
              ],
              "methodsDependedUpon": [],
              "name": "testGetInformationFromIDCodeMaleMustBeOK",
              "stackTrace": "java.lang.Throwable: Method IDCodeTest.testGetInformationFromIDCodeMaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:648)\n\tat org.testng.TestRunner.run(TestRunner.java:505)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:455)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:364)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1137)\n\tat org.testng.TestNG.runSuites(TestNG.java:1049)\n\tat org.testng.TestNG.run(TestNG.java:1017)\n\tat ee.ttu.java.studenttester.core.runners.TestNGRunner.run(TestNGRunner.java:158)\n\tat ee.ttu.java.studenttester.core.StudentTester.run(StudentTester.java:41)\n\tat ee.ttu.java.studenttester.core.StudentTester.main(StudentTester.java:72)\n",
              "exceptionClass": "java.lang.Throwable",
              "exceptionMessage": "Method IDCodeTest.testGetInformationFromIDCodeMaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"",
              "stdout": [],
              "stderr": []
            }
          ],
          "name": "ee.taltech.iti0202.idcode.IDCodeTest (TestNG)",
          "file": "ee.taltech.iti0202.idcode.IDCodeTest",
          "startDate": 1577118460179,
          "endDate": 1577118463162,
          "mode": "VERBOSE",
          "welcomeMessage": "",
          "identifier": 1,
          "count": 23,
          "weight": 23,
          "passedCount": 17,
          "grade": 73.91304347826087
        }
      ],
      "totalCount": 23,
      "totalGrade": 73.91304347826087,
      "totalPassedCount": 17
    },
    {
      "code": 2147483647,
      "identifier": "REPORT",
      "output": "TEST RESULTS\n\n* Checkstyle report *\n\nFound errors: 2\nERROR in src/ee/taltech/iti0202/idcode/IDCode.java on line 5, col 1: File contains tab characters (this is the first instance).\n\t+ERROR on line 103, col 0: Line is longer than 120 characters (found 127).\n\n\n\n\n* Compiler report *\n\nCompilation succeeded.\n\n* Unit tests *\n\n\nee.taltech.iti0202.idcode.IDCodeTest (TestNG)\nMon Dec 23 16:27:43 UTC 2019\n ---\nSUCCESS: testIdCodeIsCorrect\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeChosenControlNumberIsWrong\n\t2 msecs, weight: 1 unit\nSKIPPED: testGetInformationFromIDCodeGivenInvalidCode\n\tWeight: 1 unit\n\tTest skipped because:  Method IDCodeTest.testGetInformationFromIDCodeGivenInvalidCode()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tThis unit test depends on groups: single check, code validity\nSUCCESS: testIdCodeIsJustRandomNumbers\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeIsLongerThanAllowed\n\t1 msec, weight: 1 unit\nSKIPPED: testGetInformationFromIDCodeFemaleMustBeOK\n\tWeight: 1 unit\n\tTest skipped because:  Method IDCodeTest.testGetInformationFromIDCodeFemaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tThis unit test depends on groups: single check, code validity\nSUCCESS: testIdCode31DaysWhenMonthHasMax30\n\t2 msecs, weight: 1 unit\nFAILURE: testIdCodeIsDayNumberCorrectWrong\n\t1 msec, weight: 1 unit\n\tException type: java.lang.AssertionError\n\tDetailed information:  Day number cannot be bigger than 31! expected [false] but found [true]\nFAILURE: testIdCodeFebruaryCannotHave30Days\n\t3 msecs, weight: 1 unit\n\tException type: java.lang.AssertionError\n\tDetailed information:  February cannot have 30 days! expected [false] but found [true]\nSUCCESS: testIdCodeGenderMustBeEnumDataType\n\t1 msec, weight: 1 unit\nFAILURE: testIdCodeLongerFebruaryNotLeapYear\n\t2 msecs, weight: 1 unit\n\tException type: java.lang.AssertionError\n\tDetailed information:  February has 29 days on leap year only! expected [false] but found [true]\nSUCCESS: testIsLeapYear\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeIsShorterThanAllowed\n\t2 msecs, weight: 1 unit\nSUCCESS: testIdCodeQueueNumberCannotBeZero\n\t0 msecs, weight: 1 unit\nSUCCESS: testIdCodeIsGenderNumberCorrectWrong\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeGenderNumberIsOutOfRange\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeIsControlNumberCorrectWrong\n\t1 msec, weight: 1 unit\nSUCCESS: testGetFullYear\n\t68 msecs, weight: 1 unit\nSUCCESS: testIdCodeGenders\n\t6 msecs, weight: 1 unit\nSUCCESS: testIdCodeContainsLetters\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeFebruaryOnLeapYear\n\t1 msec, weight: 1 unit\nSUCCESS: testIdCodeIsMonthNumberCorrectOutOfRange\n\t1 msec, weight: 1 unit\nSKIPPED: testGetInformationFromIDCodeMaleMustBeOK\n\tWeight: 1 unit\n\tTest skipped because:  Method IDCodeTest.testGetInformationFromIDCodeMaleMustBeOK()[pri:0, instance:ee.taltech.iti0202.idcode.IDCodeTest@1f966492] depends on not successfully finished methods in group \"single check\"\n\tThis unit test depends on groups: single check, code validity\n\nPassed unit tests: 17/23\nFailed unit tests: 3\nSkipped unit tests: 3\nGrade: 73.9%\n\nOverall grade: 73.9%\n",
      "result": "SUCCESS"
    }
  ]
}